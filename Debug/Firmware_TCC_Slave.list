
Firmware_TCC_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005334  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054d4  080054d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054dc  080054dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054dc  080054dc  000154dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080054e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000002d0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e0  200002e0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013312  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002973  00000000  00000000  00033395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001200  00000000  00000000  00035d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e40  00000000  00000000  00036f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000219d8  00000000  00000000  00037d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000175b0  00000000  00000000  00059720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d177d  00000000  00000000  00070cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d30  00000000  00000000  00142450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00147180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080054a4 	.word	0x080054a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080054a4 	.word	0x080054a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <codec_set_reg>:
 */

#include "codec.h"

HAL_StatusTypeDef codec_set_reg(I2C_HandleTypeDef *i2c_instance, unsigned char MemAddress, uint8_t *pdata, unsigned int size)
{
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af04      	add	r7, sp, #16
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	460b      	mov	r3, r1
 80004d2:	72fb      	strb	r3, [r7, #11]
	uint64_t delayTosco = 0;
 80004d4:	f04f 0200 	mov.w	r2, #0
 80004d8:	f04f 0300 	mov.w	r3, #0
 80004dc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	while(delayTosco++ < 500000)
 80004e0:	bf00      	nop
 80004e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80004e6:	1c54      	adds	r4, r2, #1
 80004e8:	f143 0500 	adc.w	r5, r3, #0
 80004ec:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80004f0:	490c      	ldr	r1, [pc, #48]	; (8000524 <codec_set_reg+0x60>)
 80004f2:	428a      	cmp	r2, r1
 80004f4:	f173 0300 	sbcs.w	r3, r3, #0
 80004f8:	d3f3      	bcc.n	80004e2 <codec_set_reg+0x1e>
	{

	}

	return HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pdata, size, dCODEC_HAL_MAX_DELAY);
 80004fa:	7afb      	ldrb	r3, [r7, #11]
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	b29b      	uxth	r3, r3
 8000502:	f04f 31ff 	mov.w	r1, #4294967295
 8000506:	9102      	str	r1, [sp, #8]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2301      	movs	r3, #1
 8000510:	2136      	movs	r1, #54	; 0x36
 8000512:	68f8      	ldr	r0, [r7, #12]
 8000514:	f001 ff46 	bl	80023a4 <HAL_I2C_Mem_Write>
 8000518:	4603      	mov	r3, r0
}
 800051a:	4618      	mov	r0, r3
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bdb0      	pop	{r4, r5, r7, pc}
 8000522:	bf00      	nop
 8000524:	0007a120 	.word	0x0007a120

08000528 <codec_read_reg>:
uint8_t *pData,
uint16_t Size,
uint32_t Timeout)*/

HAL_StatusTypeDef codec_read_reg(I2C_HandleTypeDef *i2c_instance, uint16_t MemAddress, uint8_t * pdata, uint16_t size)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af04      	add	r7, sp, #16
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	607a      	str	r2, [r7, #4]
 8000532:	461a      	mov	r2, r3
 8000534:	460b      	mov	r3, r1
 8000536:	817b      	strh	r3, [r7, #10]
 8000538:	4613      	mov	r3, r2
 800053a:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(i2c_instance, dCODEC_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pdata, 2, dCODEC_HAL_MAX_DELAY);
 800053c:	897a      	ldrh	r2, [r7, #10]
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	9302      	str	r3, [sp, #8]
 8000544:	2302      	movs	r3, #2
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2301      	movs	r3, #1
 800054e:	2136      	movs	r1, #54	; 0x36
 8000550:	68f8      	ldr	r0, [r7, #12]
 8000552:	f002 f821 	bl	8002598 <HAL_I2C_Mem_Read>
 8000556:	4603      	mov	r3, r0
}
 8000558:	4618      	mov	r0, r3
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <codec_init>:
	uint32_t Timeout)
*/


void codec_init(I2C_HandleTypeDef *i2c_instance)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	aux[1] = ; // low byte data
	aux[0] = ; // high byte data
	result = codec_set_reg(i2c_instance, dREG_BLABLA, &aux[0], 2);
	*/

	aux[1] = 0x20;
 8000568:	2320      	movs	r3, #32
 800056a:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 800056c:	2300      	movs	r3, #0
 800056e:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_SW_RESET, &aux[0], 2);
 8000570:	f107 020c 	add.w	r2, r7, #12
 8000574:	2302      	movs	r3, #2
 8000576:	2100      	movs	r1, #0
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff ffa3 	bl	80004c4 <codec_set_reg>
 800057e:	4603      	mov	r3, r0
 8000580:	73fb      	strb	r3, [r7, #15]


	aux[1] = 0b00001000;//0xC8;
 8000582:	2308      	movs	r3, #8
 8000584:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00001000;//0xC8;
 8000586:	2308      	movs	r3, #8
 8000588:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_HPOUT, &aux[0], 2);
 800058a:	f107 020c 	add.w	r2, r7, #12
 800058e:	2302      	movs	r3, #2
 8000590:	2102      	movs	r1, #2
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff ff96 	bl	80004c4 <codec_set_reg>
 8000598:	4603      	mov	r3, r0
 800059a:	73fb      	strb	r3, [r7, #15]
	result = codec_read_reg(i2c_instance,dREG_HPOUT,databuffer, 2);
 800059c:	f107 0208 	add.w	r2, r7, #8
 80005a0:	2302      	movs	r3, #2
 80005a2:	2102      	movs	r1, #2
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff ffbf 	bl	8000528 <codec_read_reg>
 80005aa:	4603      	mov	r3, r0
 80005ac:	73fb      	strb	r3, [r7, #15]
	// result = HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, dREG_SW_RESET, I2C_MEMADD_SIZE_8BIT, &aux[0], 2, dCODEC_HAL_MAX_DELAY);
	// result = HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, dREG_HPOUT, I2C_MEMADD_SIZE_8BIT, &aux[0], 2, dCODEC_HAL_MAX_DELAY);

	aux[1] = 0x00;       // low byte data
 80005ae:	2300      	movs	r3, #0
 80005b0:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b01000000;//0b01000000; // high byte data
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_HPOMIX_CTRL, &aux[0], 2);
 80005b6:	f107 020c 	add.w	r2, r7, #12
 80005ba:	2302      	movs	r3, #2
 80005bc:	2145      	movs	r1, #69	; 0x45
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f7ff ff80 	bl	80004c4 <codec_set_reg>
 80005c4:	4603      	mov	r3, r0
 80005c6:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00001000;//00001000;
 80005c8:	2308      	movs	r3, #8
 80005ca:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00001000;//00001000;
 80005cc:	2308      	movs	r3, #8
 80005ce:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_OUTPUT1, &aux[0], 2);
 80005d0:	f107 020c 	add.w	r2, r7, #12
 80005d4:	2302      	movs	r3, #2
 80005d6:	2103      	movs	r1, #3
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ff73 	bl	80004c4 <codec_set_reg>
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 80005e2:	2300      	movs	r3, #0
 80005e4:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 80005e6:	2300      	movs	r3, #0
 80005e8:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_OUTPUT2, &aux[0], 2);
 80005ea:	f107 020c 	add.w	r2, r7, #12
 80005ee:	2302      	movs	r3, #2
 80005f0:	2105      	movs	r1, #5
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff ff66 	bl	80004c4 <codec_set_reg>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 80005fc:	2300      	movs	r3, #0
 80005fe:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000600:	2300      	movs	r3, #0
 8000602:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_MIC_INPUT_MODE_GAIN, &aux[0], 2);
 8000604:	f107 020c 	add.w	r2, r7, #12
 8000608:	2302      	movs	r3, #2
 800060a:	210d      	movs	r1, #13
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ff59 	bl	80004c4 <codec_set_reg>
 8000612:	4603      	mov	r3, r0
 8000614:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00001000;
 8000616:	2308      	movs	r3, #8
 8000618:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00001000;
 800061a:	2308      	movs	r3, #8
 800061c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_INPUT_MODE, &aux[0], 2);
 800061e:	f107 020c 	add.w	r2, r7, #12
 8000622:	2302      	movs	r3, #2
 8000624:	210f      	movs	r1, #15
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff ff4c 	bl	80004c4 <codec_set_reg>
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00100000;
 8000630:	2320      	movs	r3, #32
 8000632:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00111000;
 8000634:	2338      	movs	r3, #56	; 0x38
 8000636:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_MIX_CONTROL, &aux[0], 2);
 8000638:	f107 020c 	add.w	r2, r7, #12
 800063c:	2302      	movs	r3, #2
 800063e:	2127      	movs	r1, #39	; 0x27
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff3f 	bl	80004c4 <codec_set_reg>
 8000646:	4603      	mov	r3, r0
 8000648:	73fb      	strb	r3, [r7, #15]
	result = codec_read_reg(i2c_instance,dREG_ADC_MIX_CONTROL,databuffer, 2);
 800064a:	f107 0208 	add.w	r2, r7, #8
 800064e:	2302      	movs	r3, #2
 8000650:	2127      	movs	r1, #39	; 0x27
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ff68 	bl	8000528 <codec_read_reg>
 8000658:	4603      	mov	r3, r0
 800065a:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000660:	2300      	movs	r3, #0
 8000662:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXL_CTRL1, &aux[0], 2);
 8000664:	f107 020c 	add.w	r2, r7, #12
 8000668:	2302      	movs	r3, #2
 800066a:	213b      	movs	r1, #59	; 0x3b
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff29 	bl	80004c4 <codec_set_reg>
 8000672:	4603      	mov	r3, r0
 8000674:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01001111; 
 8000676:	234f      	movs	r3, #79	; 0x4f
 8000678:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 800067a:	2300      	movs	r3, #0
 800067c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXL_CTRL2, &aux[0], 2);
 800067e:	f107 020c 	add.w	r2, r7, #12
 8000682:	2302      	movs	r3, #2
 8000684:	213c      	movs	r1, #60	; 0x3c
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ff1c 	bl	80004c4 <codec_set_reg>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01001111; 
 8000690:	234f      	movs	r3, #79	; 0x4f
 8000692:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000694:	2300      	movs	r3, #0
 8000696:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXR_CTRL2, &aux[0], 2);
 8000698:	f107 020c 	add.w	r2, r7, #12
 800069c:	2302      	movs	r3, #2
 800069e:	213e      	movs	r1, #62	; 0x3e
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ff0f 	bl	80004c4 <codec_set_reg>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 80006aa:	2300      	movs	r3, #0
 80006ac:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 80006ae:	2300      	movs	r3, #0
 80006b0:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXR_CTRL1, &aux[0], 2);
 80006b2:	f107 020c 	add.w	r2, r7, #12
 80006b6:	2302      	movs	r3, #2
 80006b8:	213d      	movs	r1, #61	; 0x3d
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff ff02 	bl	80004c4 <codec_set_reg>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 80006c4:	2300      	movs	r3, #0
 80006c6:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 80006c8:	2300      	movs	r3, #0
 80006ca:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXL_CTRL1, &aux[0], 2);
 80006cc:	f107 020c 	add.w	r2, r7, #12
 80006d0:	2302      	movs	r3, #2
 80006d2:	214d      	movs	r1, #77	; 0x4d
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fef5 	bl	80004c4 <codec_set_reg>
 80006da:	4603      	mov	r3, r0
 80006dc:	73fb      	strb	r3, [r7, #15]
	
	aux[1] = 0x00;
 80006de:	2300      	movs	r3, #0
 80006e0:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 80006e2:	2300      	movs	r3, #0
 80006e4:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXL_CTRL2, &aux[0], 2);
 80006e6:	f107 020c 	add.w	r2, r7, #12
 80006ea:	2302      	movs	r3, #2
 80006ec:	214e      	movs	r1, #78	; 0x4e
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff fee8 	bl	80004c4 <codec_set_reg>
 80006f4:	4603      	mov	r3, r0
 80006f6:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01111000;
 80006f8:	2378      	movs	r3, #120	; 0x78
 80006fa:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000010;
 80006fc:	2302      	movs	r3, #2
 80006fe:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXL_CTRL3, &aux[0], 2);
 8000700:	f107 020c 	add.w	r2, r7, #12
 8000704:	2302      	movs	r3, #2
 8000706:	214f      	movs	r1, #79	; 0x4f
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff fedb 	bl	80004c4 <codec_set_reg>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01111000;
 8000712:	2378      	movs	r3, #120	; 0x78
 8000714:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000010;
 8000716:	2302      	movs	r3, #2
 8000718:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXR_CTRL3, &aux[0], 2);
 800071a:	f107 020c 	add.w	r2, r7, #12
 800071e:	2302      	movs	r3, #2
 8000720:	2152      	movs	r1, #82	; 0x52
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff fece 	bl	80004c4 <codec_set_reg>
 8000728:	4603      	mov	r3, r0
 800072a:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;//00000000;
 800072c:	2300      	movs	r3, #0
 800072e:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11000000;//11000000;//00110000;
 8000730:	23c0      	movs	r3, #192	; 0xc0
 8000732:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LOUTMIX_CTRL, &aux[0], 2);
 8000734:	f107 020c 	add.w	r2, r7, #12
 8000738:	2302      	movs	r3, #2
 800073a:	2153      	movs	r1, #83	; 0x53
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fec1 	bl	80004c4 <codec_set_reg>
 8000742:	4603      	mov	r3, r0
 8000744:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00111111; // um certo ganho
 8000746:	233f      	movs	r3, #63	; 0x3f
 8000748:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00111111; // um certo ganho
 800074a:	233f      	movs	r3, #63	; 0x3f
 800074c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DIG_VOL_CTRL, &aux[0], 2);
 800074e:	f107 020c 	add.w	r2, r7, #12
 8000752:	2302      	movs	r3, #2
 8000754:	211c      	movs	r1, #28
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff feb4 	bl	80004c4 <codec_set_reg>
 800075c:	4603      	mov	r3, r0
 800075e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 8000760:	2300      	movs	r3, #0
 8000762:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 8000764:	2300      	movs	r3, #0
 8000766:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DIG_BOOST_CTRL, &aux[0], 2);
 8000768:	f107 020c 	add.w	r2, r7, #12
 800076c:	2302      	movs	r3, #2
 800076e:	211e      	movs	r1, #30
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff fea7 	bl	80004c4 <codec_set_reg>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b10000000; 
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10000000; 
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC2DAC_DIG_MIX_CTRL, &aux[0], 2);
 8000782:	f107 020c 	add.w	r2, r7, #12
 8000786:	2302      	movs	r3, #2
 8000788:	2129      	movs	r1, #41	; 0x29
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff fe9a 	bl	80004c4 <codec_set_reg>
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0xAF;
 8000794:	23af      	movs	r3, #175	; 0xaf
 8000796:	737b      	strb	r3, [r7, #13]
	aux[0] = 0xAF;
 8000798:	23af      	movs	r3, #175	; 0xaf
 800079a:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DACL1_R1_DIG_VOL, &aux[0], 2);
 800079c:	f107 020c 	add.w	r2, r7, #12
 80007a0:	2302      	movs	r3, #2
 80007a2:	2119      	movs	r1, #25
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fe8d 	bl	80004c4 <codec_set_reg>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00010010;
 80007ae:	2312      	movs	r3, #18
 80007b0:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00010010;
 80007b2:	2312      	movs	r3, #18
 80007b4:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DAC_DIG_MIX_CTRL, &aux[0], 2);
 80007b6:	f107 020c 	add.w	r2, r7, #12
 80007ba:	2302      	movs	r3, #2
 80007bc:	212a      	movs	r1, #42	; 0x2a
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff fe80 	bl	80004c4 <codec_set_reg>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
	

	aux[1] = 0b00010001;
 80007c8:	2311      	movs	r3, #17
 80007ca:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 80007cc:	2300      	movs	r3, #0
 80007ce:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_GENERAL_CTRL1, &aux[0], 2);
 80007d0:	f107 020c 	add.w	r2, r7, #12
 80007d4:	2302      	movs	r3, #2
 80007d6:	21fa      	movs	r1, #250	; 0xfa
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff fe73 	bl	80004c4 <codec_set_reg>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000110;
 80007e2:	2306      	movs	r3, #6
 80007e4:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10011000;
 80007e6:	2398      	movs	r3, #152	; 0x98
 80007e8:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL1, &aux[0], 2);
 80007ea:	f107 020c 	add.w	r2, r7, #12
 80007ee:	2302      	movs	r3, #2
 80007f0:	2161      	movs	r1, #97	; 0x61
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fe66 	bl	80004c4 <codec_set_reg>
 80007f8:	4603      	mov	r3, r0
 80007fa:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 80007fc:	2300      	movs	r3, #0
 80007fe:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10001000;
 8000800:	2388      	movs	r3, #136	; 0x88
 8000802:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL2, &aux[0], 2);
 8000804:	f107 020c 	add.w	r2, r7, #12
 8000808:	2302      	movs	r3, #2
 800080a:	2162      	movs	r1, #98	; 0x62
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff fe59 	bl	80004c4 <codec_set_reg>
 8000812:	4603      	mov	r3, r0
 8000814:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b11111001;
 8000816:	23f9      	movs	r3, #249	; 0xf9
 8000818:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11111000;
 800081a:	23f8      	movs	r3, #248	; 0xf8
 800081c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL3, &aux[0], 2);
 800081e:	f107 020c 	add.w	r2, r7, #12
 8000822:	2302      	movs	r3, #2
 8000824:	2163      	movs	r1, #99	; 0x63
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fe4c 	bl	80004c4 <codec_set_reg>
 800082c:	4603      	mov	r3, r0
 800082e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00110110;//00110110;
 8000830:	2336      	movs	r3, #54	; 0x36
 8000832:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11001010;
 8000834:	23ca      	movs	r3, #202	; 0xca
 8000836:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL4, &aux[0], 2);
 8000838:	f107 020c 	add.w	r2, r7, #12
 800083c:	2302      	movs	r3, #2
 800083e:	2164      	movs	r1, #100	; 0x64
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fe3f 	bl	80004c4 <codec_set_reg>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 800084a:	2300      	movs	r3, #0
 800084c:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11001100;
 800084e:	23cc      	movs	r3, #204	; 0xcc
 8000850:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL5, &aux[0], 2);
 8000852:	f107 020c 	add.w	r2, r7, #12
 8000856:	2302      	movs	r3, #2
 8000858:	2165      	movs	r1, #101	; 0x65
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff fe32 	bl	80004c4 <codec_set_reg>
 8000860:	4603      	mov	r3, r0
 8000862:	73fb      	strb	r3, [r7, #15]
	
	aux[1] = 0x00;
 8000864:	2300      	movs	r3, #0
 8000866:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00111111;
 8000868:	233f      	movs	r3, #63	; 0x3f
 800086a:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL6, &aux[0], 2);
 800086c:	f107 020c 	add.w	r2, r7, #12
 8000870:	2302      	movs	r3, #2
 8000872:	2166      	movs	r1, #102	; 0x66
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff fe25 	bl	80004c4 <codec_set_reg>
 800087a:	4603      	mov	r3, r0
 800087c:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;//00000000;//00000110;
 800087e:	2300      	movs	r3, #0
 8000880:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10000000;//10011000; // config device as slave
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DIG_INTERFACE_CONTROL, &aux[0], 2);
 8000886:	f107 020c 	add.w	r2, r7, #12
 800088a:	2302      	movs	r3, #2
 800088c:	2170      	movs	r1, #112	; 0x70
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fe18 	bl	80004c4 <codec_set_reg>
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000101;//00001010;//00000101;
 8000898:	2305      	movs	r3, #5
 800089a:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000001;//00010000;
 800089c:	2301      	movs	r3, #1
 800089e:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DAC_CLK_CTRL1, &aux[0], 2);
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	2302      	movs	r3, #2
 80008a6:	2173      	movs	r1, #115	; 0x73
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fe0b 	bl	80004c4 <codec_set_reg>
 80008ae:	4603      	mov	r3, r0
 80008b0:	73fb      	strb	r3, [r7, #15]
	result = codec_read_reg(i2c_instance,dREG_ADC_DAC_CLK_CTRL1,databuffer, 2);
 80008b2:	f107 0208 	add.w	r2, r7, #8
 80008b6:	2302      	movs	r3, #2
 80008b8:	2173      	movs	r1, #115	; 0x73
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fe34 	bl	8000528 <codec_read_reg>
 80008c0:	4603      	mov	r3, r0
 80008c2:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 80008c4:	2300      	movs	r3, #0
 80008c6:	737b      	strb	r3, [r7, #13]
	aux[0] = 00001100;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DAC_CLK_CTRL2, &aux[0], 2);
 80008cc:	f107 020c 	add.w	r2, r7, #12
 80008d0:	2302      	movs	r3, #2
 80008d2:	2174      	movs	r1, #116	; 0x74
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fdf5 	bl	80004c4 <codec_set_reg>
 80008da:	4603      	mov	r3, r0
 80008dc:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 80008de:	2300      	movs	r3, #0
 80008e0:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 80008e2:	2300      	movs	r3, #0
 80008e4:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_GLOBAL_CLK_CTRL, &aux[0], 2);
 80008e6:	f107 020c 	add.w	r2, r7, #12
 80008ea:	2302      	movs	r3, #2
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fde8 	bl	80004c4 <codec_set_reg>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00011101;
 80008f8:	231d      	movs	r3, #29
 80008fa:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10000000;
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_HP_AMP_CTRL1, &aux[0], 2);
 8000900:	f107 020c 	add.w	r2, r7, #12
 8000904:	2302      	movs	r3, #2
 8000906:	218e      	movs	r1, #142	; 0x8e
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fddb 	bl	80004c4 <codec_set_reg>
 800090e:	4603      	mov	r3, r0
 8000910:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x20;
 8000912:	2320      	movs	r3, #32
 8000914:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00100010;
 8000916:	2322      	movs	r3, #34	; 0x22
 8000918:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_WIND_FILTER_CTRL2, &aux[0], 2);
 800091a:	f107 020c 	add.w	r2, r7, #12
 800091e:	2302      	movs	r3, #2
 8000920:	21d3      	movs	r1, #211	; 0xd3
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff fdce 	bl	80004c4 <codec_set_reg>
 8000928:	4603      	mov	r3, r0
 800092a:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00100001;
 800092c:	2321      	movs	r3, #33	; 0x21
 800092e:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11100001;
 8000930:	23e1      	movs	r3, #225	; 0xe1
 8000932:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DRC_AGC_CTRL1, &aux[0], 2);
 8000934:	f107 020c 	add.w	r2, r7, #12
 8000938:	2302      	movs	r3, #2
 800093a:	21b4      	movs	r1, #180	; 0xb4
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fdc1 	bl	80004c4 <codec_set_reg>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 8000946:	2300      	movs	r3, #0
 8000948:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00100000;
 800094a:	2320      	movs	r3, #32
 800094c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DRC_AGC_CTRL2, &aux[0], 2);
 800094e:	f107 020c 	add.w	r2, r7, #12
 8000952:	2302      	movs	r3, #2
 8000954:	21b5      	movs	r1, #181	; 0xb5
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff fdb4 	bl	80004c4 <codec_set_reg>
 800095c:	4603      	mov	r3, r0
 800095e:	73fb      	strb	r3, [r7, #15]
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  inBufferPtr = &adcData[0];
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8000974:	601a      	str	r2, [r3, #0]
  outBufferPtr = &dacData[0];
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 8000978:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 800097a:	601a      	str	r2, [r3, #0]
  flagDataReady = 1;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	200002b0 	.word	0x200002b0
 8000994:	200001b0 	.word	0x200001b0
 8000998:	20000000 	.word	0x20000000
 800099c:	20000230 	.word	0x20000230
 80009a0:	200002b4 	.word	0x200002b4

080009a4 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  inBufferPtr = &adcData[dBUFFER_SIZE / 2];
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <HAL_I2SEx_TxRxCpltCallback+0x28>)
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 80009b0:	601a      	str	r2, [r3, #0]
  outBufferPtr = &dacData[dBUFFER_SIZE / 2];
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 80009b4:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 80009b6:	601a      	str	r2, [r3, #0]
  flagDataReady = 1;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_I2SEx_TxRxCpltCallback+0x38>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	200002b0 	.word	0x200002b0
 80009d0:	200001f0 	.word	0x200001f0
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000270 	.word	0x20000270
 80009dc:	200002b4 	.word	0x200002b4

080009e0 <processData>:
        buffer[i] = amplitude * sin(2 * M_PI * FREQUENCY * t);
    }
}

void processData()
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  static float leftIn, leftOut;
  static float rightIn, rightOut;
  static uint32_t time = 0;

  if(time++ > 100000)
 80009e6:	4b4c      	ldr	r3, [pc, #304]	; (8000b18 <processData+0x138>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	494a      	ldr	r1, [pc, #296]	; (8000b18 <processData+0x138>)
 80009ee:	600a      	str	r2, [r1, #0]
 80009f0:	4a4a      	ldr	r2, [pc, #296]	; (8000b1c <processData+0x13c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d902      	bls.n	80009fc <processData+0x1c>
  {
	  time = 0;
 80009f6:	4b48      	ldr	r3, [pc, #288]	; (8000b18 <processData+0x138>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
  }

  for (uint16_t n = 0 ; n < (dBUFFER_SIZE / 2 - 1) ; n += 2)
 80009fc:	2300      	movs	r3, #0
 80009fe:	80fb      	strh	r3, [r7, #6]
 8000a00:	e07c      	b.n	8000afc <processData+0x11c>
  {

    //================ LEFT CHANNEL ================
    // Get ADC input and convert it to float
    leftIn = INT16_TO_FLOAT * inBufferPtr[n];
 8000a02:	4b47      	ldr	r3, [pc, #284]	; (8000b20 <processData+0x140>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a18:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000b24 <processData+0x144>
 8000a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a20:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <processData+0x148>)
 8000a22:	edc3 7a00 	vstr	s15, [r3]
    if (leftIn > 1.0f)
 8000a26:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <processData+0x148>)
 8000a28:	edd3 7a00 	vldr	s15, [r3]
 8000a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a38:	dd09      	ble.n	8000a4e <processData+0x6e>
    {
      leftIn -= 2.0f;
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <processData+0x148>)
 8000a3c:	edd3 7a00 	vldr	s15, [r3]
 8000a40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000a44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a48:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <processData+0x148>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
    }

    // Compute new sample
    leftOut = leftIn;
 8000a4e:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <processData+0x148>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a36      	ldr	r2, [pc, #216]	; (8000b2c <processData+0x14c>)
 8000a54:	6013      	str	r3, [r2, #0]
    //leftOut = 1000000000 * sin(2 * M_PI * FREQUENCY * time);

    // Convert back to signed int  and set DAC output
    outBufferPtr[n] = (int16_t)(FLOAT_TO_INT16 * leftOut);
 8000a56:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <processData+0x14c>)
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000b30 <processData+0x150>
 8000a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a64:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <processData+0x154>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a72:	ee17 2a90 	vmov	r2, s15
 8000a76:	b212      	sxth	r2, r2
 8000a78:	801a      	strh	r2, [r3, #0]
    //outBufferPtr[n] = 0;

    //================ RIGHT CHANNEL ================
    // Get ADC input and convert it to float
    rightIn = INT16_TO_FLOAT * inBufferPtr[n+1];
 8000a7a:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <processData+0x140>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	3301      	adds	r3, #1
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	ee07 3a90 	vmov	s15, r3
 8000a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a92:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000b24 <processData+0x144>
 8000a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <processData+0x158>)
 8000a9c:	edc3 7a00 	vstr	s15, [r3]
    if (rightIn > 1.0f)
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <processData+0x158>)
 8000aa2:	edd3 7a00 	vldr	s15, [r3]
 8000aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab2:	dd09      	ble.n	8000ac8 <processData+0xe8>
    {
      rightIn -= 2.0f;
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <processData+0x158>)
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000abe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <processData+0x158>)
 8000ac4:	edc3 7a00 	vstr	s15, [r3]
    }

    // Compute new sample
    rightOut = rightIn;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <processData+0x158>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <processData+0x15c>)
 8000ace:	6013      	str	r3, [r2, #0]
    //rightOut = 1000000000 * sin(2 * M_PI * FREQUENCY * time);

    // Convert back to signed int  and set DAC output
    outBufferPtr[n+1] = (int16_t)(FLOAT_TO_INT16 * rightOut);
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <processData+0x15c>)
 8000ad2:	edd3 7a00 	vldr	s15, [r3]
 8000ad6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000b30 <processData+0x150>
 8000ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <processData+0x154>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aee:	ee17 2a90 	vmov	r2, s15
 8000af2:	b212      	sxth	r2, r2
 8000af4:	801a      	strh	r2, [r3, #0]
  for (uint16_t n = 0 ; n < (dBUFFER_SIZE / 2 - 1) ; n += 2)
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	3302      	adds	r3, #2
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	2b1e      	cmp	r3, #30
 8000b00:	f67f af7f 	bls.w	8000a02 <processData+0x22>
    //outBufferPtr[n+1] = 0;

  }
  flagDataReady = 0;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <processData+0x160>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200002b8 	.word	0x200002b8
 8000b1c:	000186a0 	.word	0x000186a0
 8000b20:	200002b0 	.word	0x200002b0
 8000b24:	38000000 	.word	0x38000000
 8000b28:	200002bc 	.word	0x200002bc
 8000b2c:	200002c0 	.word	0x200002c0
 8000b30:	47000000 	.word	0x47000000
 8000b34:	20000000 	.word	0x20000000
 8000b38:	200002c4 	.word	0x200002c4
 8000b3c:	200002c8 	.word	0x200002c8
 8000b40:	200002b4 	.word	0x200002b4

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t blinkTimer = 1; //1ms steps
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	80bb      	strh	r3, [r7, #4]
  uint16_t blinkCount = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b52:	f000 fca7 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b56:	f000 f845 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5a:	f000 f9a9 	bl	8000eb0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000b5e:	f000 f8fd 	bl	8000d5c <MX_I2C2_Init>
  MX_I2S2_Init();
 8000b62:	f000 f929 	bl	8000db8 <MX_I2S2_Init>
  MX_ADC1_Init();
 8000b66:	f000 f8a7 	bl	8000cb8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b6a:	f000 f977 	bl	8000e5c <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000b6e:	f000 f951 	bl	8000e14 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  codec_init(&hi2c2);
 8000b72:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <main+0x80>)
 8000b74:	f7ff fcf4 	bl	8000560 <codec_init>
  //codec_init_teste(&hi2c2);
  HAL_TIM_Base_Start_IT(&htim14);
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <main+0x84>)
 8000b7a:	f003 ff51 	bl	8004a20 <HAL_TIM_Base_Start_IT>

  HAL_StatusTypeDef status = HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t *)dacData, (uint16_t *)adcData, dBUFFER_SIZE);
 8000b7e:	2340      	movs	r3, #64	; 0x40
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <main+0x88>)
 8000b82:	4913      	ldr	r1, [pc, #76]	; (8000bd0 <main+0x8c>)
 8000b84:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <main+0x90>)
 8000b86:	f002 fccf 	bl	8003528 <HAL_I2SEx_TransmitReceive_DMA>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (flagDataReady)
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <main+0x94>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <main+0x56>
    {
		processData();
 8000b96:	f7ff ff23 	bl	80009e0 <processData>
    }

    if (GL_timer_1ms)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <main+0x98>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f5      	beq.n	8000b8e <main+0x4a>
    {
      GL_timer_1ms = 0;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <main+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]

      if(blinkCount++ >= blinkTimer)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	80fa      	strh	r2, [r7, #6]
 8000bae:	88ba      	ldrh	r2, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d8ec      	bhi.n	8000b8e <main+0x4a>
      {
        blinkCount = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_TogglePin(STAT_LED_INT_GPIO_Port, STAT_LED_INT_Pin);
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	4809      	ldr	r0, [pc, #36]	; (8000be0 <main+0x9c>)
 8000bbc:	f001 fa93 	bl	80020e6 <HAL_GPIO_TogglePin>
    if (flagDataReady)
 8000bc0:	e7e5      	b.n	8000b8e <main+0x4a>
 8000bc2:	bf00      	nop
 8000bc4:	20000088 	.word	0x20000088
 8000bc8:	20000124 	.word	0x20000124
 8000bcc:	200001b0 	.word	0x200001b0
 8000bd0:	20000230 	.word	0x20000230
 8000bd4:	200000dc 	.word	0x200000dc
 8000bd8:	200002b4 	.word	0x200002b4
 8000bdc:	20000030 	.word	0x20000030
 8000be0:	40020400 	.word	0x40020400

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b094      	sub	sp, #80	; 0x50
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0320 	add.w	r3, r7, #32
 8000bee:	2230      	movs	r2, #48	; 0x30
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 fc2a 	bl	800544c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	4a27      	ldr	r2, [pc, #156]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <SystemClock_Config+0xd0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemClock_Config+0xd0>)
 8000c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <SystemClock_Config+0xd0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000c54:	230d      	movs	r3, #13
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c58:	23a8      	movs	r3, #168	; 0xa8
 8000c5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c60:	2304      	movs	r3, #4
 8000c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c64:	f107 0320 	add.w	r3, r7, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 f8f1 	bl	8003e50 <HAL_RCC_OscConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c74:	f000 f9ec 	bl	8001050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c78:	230f      	movs	r3, #15
 8000c7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2105      	movs	r1, #5
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fb52 	bl	8004340 <HAL_RCC_ClockConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ca2:	f000 f9d5 	bl	8001050 <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3750      	adds	r7, #80	; 0x50
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000ccc:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <MX_ADC1_Init+0x9c>)
 8000cce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000cd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <MX_ADC1_Init+0xa0>)
 8000cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d1a:	f000 fc35 	bl	8001588 <HAL_ADC_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d24:	f000 f994 	bl	8001050 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d3a:	f000 fc69 	bl	8001610 <HAL_ADC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d44:	f000 f984 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000040 	.word	0x20000040
 8000d54:	40012000 	.word	0x40012000
 8000d58:	0f000001 	.word	0x0f000001

08000d5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_I2C2_Init+0x54>)
 8000d62:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <MX_I2C2_Init+0x58>)
 8000d64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 10000;
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_I2C2_Init+0x54>)
 8000d68:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d6c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_I2C2_Init+0x54>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_I2C2_Init+0x54>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <MX_I2C2_Init+0x54>)
 8000d7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_I2C2_Init+0x54>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_I2C2_Init+0x54>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_I2C2_Init+0x54>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_I2C2_Init+0x54>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_I2C2_Init+0x54>)
 8000d9c:	f001 f9be 	bl	800211c <HAL_I2C_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000da6:	f000 f953 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000088 	.word	0x20000088
 8000db4:	40005800 	.word	0x40005800

08000db8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_I2S2_Init+0x54>)
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <MX_I2S2_Init+0x58>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_I2S2_Init+0x54>)
 8000dc4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000dc8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <MX_I2S2_Init+0x54>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_I2S2_Init+0x54>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <MX_I2S2_Init+0x54>)
 8000dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ddc:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_I2S2_Init+0x54>)
 8000de0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000de4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_I2S2_Init+0x54>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <MX_I2S2_Init+0x54>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_I2S2_Init+0x54>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_I2S2_Init+0x54>)
 8000dfa:	f002 f94f 	bl	800309c <HAL_I2S_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000e04:	f000 f924 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200000dc 	.word	0x200000dc
 8000e10:	40003800 	.word	0x40003800

08000e14 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_TIM14_Init+0x40>)
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <MX_TIM14_Init+0x44>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <MX_TIM14_Init+0x40>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_TIM14_Init+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 8400;
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_TIM14_Init+0x40>)
 8000e2c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000e30:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_TIM14_Init+0x40>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_TIM14_Init+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_TIM14_Init+0x40>)
 8000e40:	f003 fd9e 	bl	8004980 <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000e4a:	f000 f901 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000124 	.word	0x20000124
 8000e58:	40002000 	.word	0x40002000

08000e5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <MX_USART1_UART_Init+0x50>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e94:	f004 f818 	bl	8004ec8 <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e9e:	f000 f8d7 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000016c 	.word	0x2000016c
 8000eac:	40011000 	.word	0x40011000

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000f3c:	4812      	ldr	r0, [pc, #72]	; (8000f88 <MX_GPIO_Init+0xd8>)
 8000f3e:	f001 f8b9 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Status_LED_external_Pin STAT_LED_INT_Pin STAT_LED_EXT_Pin */
  GPIO_InitStruct.Pin = Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin;
 8000f42:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <MX_GPIO_Init+0xd8>)
 8000f5c:	f000 ff0e 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_GPIO_Init+0xd8>)
 8000f76:	f000 ff01 	bl	8001d7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020400 	.word	0x40020400

08000f8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  static int count_1ms = 0;
  static int count_10ms = 0;
  static int count_100ms = 0;
  //static int count_1s = 0;

  if (htim->Instance == TIM14) // 100us
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a23      	ldr	r2, [pc, #140]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d13e      	bne.n	800101c <HAL_TIM_PeriodElapsedCallback+0x90>
  {
    

    GL_timer_100us = 1;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
    count_100us++;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	4a21      	ldr	r2, [pc, #132]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000fac:	6013      	str	r3, [r2, #0]

    if(count_100us >= 10)
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b09      	cmp	r3, #9
 8000fb4:	dd0a      	ble.n	8000fcc <HAL_TIM_PeriodElapsedCallback+0x40>
    {
      count_100us = 0;
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
      GL_timer_1ms = 1;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
      count_1ms++;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000fca:	6013      	str	r3, [r2, #0]
    }

    if(count_1ms >= 10)
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b09      	cmp	r3, #9
 8000fd2:	dd0a      	ble.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x5e>
    {
      count_1ms = 0;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
      GL_timer_10ms = 1;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
      count_10ms++;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	4a16      	ldr	r2, [pc, #88]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000fe8:	6013      	str	r3, [r2, #0]
    }

    if(count_10ms >= 10)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b09      	cmp	r3, #9
 8000ff0:	dd0a      	ble.n	8001008 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {
      count_10ms = 0;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
      GL_timer_100ms = 1;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
      count_100ms++;
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001006:	6013      	str	r3, [r2, #0]
      //HAL_GPIO_TogglePin(STAT_LED_INT_GPIO_Port, STAT_LED_INT_Pin);
    }

    if(count_100ms >= 10)
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b09      	cmp	r3, #9
 800100e:	dd05      	ble.n	800101c <HAL_TIM_PeriodElapsedCallback+0x90>
    {
      count_100ms = 0;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
      GL_timer_1s = 1;
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
      //count_1s++;
    }
  
  }
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40002000 	.word	0x40002000
 800102c:	2000002c 	.word	0x2000002c
 8001030:	200002cc 	.word	0x200002cc
 8001034:	20000030 	.word	0x20000030
 8001038:	200002d0 	.word	0x200002d0
 800103c:	20000034 	.word	0x20000034
 8001040:	200002d4 	.word	0x200002d4
 8001044:	20000038 	.word	0x20000038
 8001048:	200002d8 	.word	0x200002d8
 800104c:	2000003c 	.word	0x2000003c

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001058:	e7fe      	b.n	8001058 <Error_Handler+0x8>
	...

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <HAL_MspInit+0x4c>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_MspInit+0x4c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_MspInit+0x4c>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_ADC_MspInit+0x7c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d127      	bne.n	800111e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|POT3_Pin|POT4_Pin
 8001106:	231f      	movs	r3, #31
 8001108:	617b      	str	r3, [r7, #20]
                          |AD_PWR_SUPPLY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2303      	movs	r3, #3
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_ADC_MspInit+0x84>)
 800111a:	f000 fe2f 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012000 	.word	0x40012000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a19      	ldr	r2, [pc, #100]	; (80011b8 <HAL_I2C_MspInit+0x84>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12c      	bne.n	80011b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_I2C_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_I2C_MspInit+0x88>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_I2C_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001172:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001178:	2312      	movs	r3, #18
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001184:	2304      	movs	r3, #4
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	480c      	ldr	r0, [pc, #48]	; (80011c0 <HAL_I2C_MspInit+0x8c>)
 8001190:	f000 fdf4 	bl	8001d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_I2C_MspInit+0x88>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_I2C_MspInit+0x88>)
 800119e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_I2C_MspInit+0x88>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40005800 	.word	0x40005800
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020400 	.word	0x40020400

080011c4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a39      	ldr	r2, [pc, #228]	; (80012d4 <HAL_I2S_MspInit+0x110>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d16b      	bne.n	80012cc <HAL_I2S_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80011f4:	2301      	movs	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80011f8:	2332      	movs	r3, #50	; 0x32
 80011fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fa7b 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001210:	f7ff ff1e 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <HAL_I2S_MspInit+0x114>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a2e      	ldr	r2, [pc, #184]	; (80012d8 <HAL_I2S_MspInit+0x114>)
 800121e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <HAL_I2S_MspInit+0x114>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HAL_I2S_MspInit+0x114>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <HAL_I2S_MspInit+0x114>)
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	6313      	str	r3, [r2, #48]	; 0x30
 8001240:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_I2S_MspInit+0x114>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <HAL_I2S_MspInit+0x114>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a20      	ldr	r2, [pc, #128]	; (80012d8 <HAL_I2S_MspInit+0x114>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_I2S_MspInit+0x114>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001268:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800127a:	2305      	movs	r3, #5
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	4815      	ldr	r0, [pc, #84]	; (80012dc <HAL_I2S_MspInit+0x118>)
 8001286:	f000 fd79 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800128a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800129c:	2306      	movs	r3, #6
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <HAL_I2S_MspInit+0x118>)
 80012a8:	f000 fd68 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ac:	2340      	movs	r3, #64	; 0x40
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012bc:	2305      	movs	r3, #5
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <HAL_I2S_MspInit+0x11c>)
 80012c8:	f000 fd58 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012cc:	bf00      	nop
 80012ce:	3738      	adds	r7, #56	; 0x38
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40003800 	.word	0x40003800
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020800 	.word	0x40020800

080012e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_TIM_Base_MspInit+0x48>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d115      	bne.n	8001322 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	202d      	movs	r0, #45	; 0x2d
 8001318:	f000 fc73 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800131c:	202d      	movs	r0, #45	; 0x2d
 800131e:	f000 fc8c 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40002000 	.word	0x40002000
 8001330:	40023800 	.word	0x40023800

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_UART_MspInit+0x84>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12c      	bne.n	80013b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_UART_MspInit+0x88>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <HAL_UART_MspInit+0x88>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800138e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013a0:	2307      	movs	r3, #7
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_UART_MspInit+0x8c>)
 80013ac:	f000 fce6 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40011000 	.word	0x40011000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 f89a 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800141e:	f003 fb6f 	bl	8004b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000124 	.word	0x20000124

0800142c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <SystemInit+0x20>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <SystemInit+0x20>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001456:	490e      	ldr	r1, [pc, #56]	; (8001490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800146c:	4c0b      	ldr	r4, [pc, #44]	; (800149c <LoopFillZerobss+0x26>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800147a:	f7ff ffd7 	bl	800142c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147e:	f003 ffed 	bl	800545c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001482:	f7ff fb5f 	bl	8000b44 <main>
  bx  lr    
 8001486:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001494:	080054e4 	.word	0x080054e4
  ldr r2, =_sbss
 8001498:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800149c:	200002e0 	.word	0x200002e0

080014a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_Init+0x40>)
 80014ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_Init+0x40>)
 80014ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_Init+0x40>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 fb8d 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f000 f808 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff fdc0 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023c00 	.word	0x40023c00

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fba5 	bl	8001c56 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 fb6d 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000004 	.word	0x20000004
 8001540:	2000000c 	.word	0x2000000c
 8001544:	20000008 	.word	0x20000008

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2000000c 	.word	0x2000000c
 800156c:	200002dc 	.word	0x200002dc

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200002dc 	.word	0x200002dc

08001588 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e033      	b.n	8001606 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fd80 	bl	80010ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ce:	f023 0302 	bic.w	r3, r3, #2
 80015d2:	f043 0202 	orr.w	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f93a 	bl	8001854 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f023 0303 	bic.w	r3, r3, #3
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
 80015f6:	e001      	b.n	80015fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1c>
 8001628:	2302      	movs	r3, #2
 800162a:	e105      	b.n	8001838 <HAL_ADC_ConfigChannel+0x228>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b09      	cmp	r3, #9
 800163a:	d925      	bls.n	8001688 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68d9      	ldr	r1, [r3, #12]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	3b1e      	subs	r3, #30
 8001652:	2207      	movs	r2, #7
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43da      	mvns	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	400a      	ands	r2, r1
 8001660:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68d9      	ldr	r1, [r3, #12]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	b29b      	uxth	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	4603      	mov	r3, r0
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4403      	add	r3, r0
 800167a:	3b1e      	subs	r3, #30
 800167c:	409a      	lsls	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	e022      	b.n	80016ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	2207      	movs	r2, #7
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	400a      	ands	r2, r1
 80016aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6919      	ldr	r1, [r3, #16]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4403      	add	r3, r0
 80016c4:	409a      	lsls	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d824      	bhi.n	8001720 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b05      	subs	r3, #5
 80016e8:	221f      	movs	r2, #31
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	400a      	ands	r2, r1
 80016f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b05      	subs	r3, #5
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	635a      	str	r2, [r3, #52]	; 0x34
 800171e:	e04c      	b.n	80017ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d824      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	3b23      	subs	r3, #35	; 0x23
 800173a:	221f      	movs	r2, #31
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43da      	mvns	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	400a      	ands	r2, r1
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b23      	subs	r3, #35	; 0x23
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
 8001770:	e023      	b.n	80017ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3b41      	subs	r3, #65	; 0x41
 8001784:	221f      	movs	r2, #31
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	400a      	ands	r2, r1
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3b41      	subs	r3, #65	; 0x41
 80017ae:	fa00 f203 	lsl.w	r2, r0, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_ADC_ConfigChannel+0x234>)
 80017bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a21      	ldr	r2, [pc, #132]	; (8001848 <HAL_ADC_ConfigChannel+0x238>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d109      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1cc>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b12      	cmp	r3, #18
 80017ce:	d105      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_ADC_ConfigChannel+0x238>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d123      	bne.n	800182e <HAL_ADC_ConfigChannel+0x21e>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d003      	beq.n	80017f6 <HAL_ADC_ConfigChannel+0x1e6>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b11      	cmp	r3, #17
 80017f4:	d11b      	bne.n	800182e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b10      	cmp	r3, #16
 8001808:	d111      	bne.n	800182e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_ADC_ConfigChannel+0x23c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <HAL_ADC_ConfigChannel+0x240>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	0c9a      	lsrs	r2, r3, #18
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001820:	e002      	b.n	8001828 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3b01      	subs	r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f9      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40012300 	.word	0x40012300
 8001848:	40012000 	.word	0x40012000
 800184c:	20000004 	.word	0x20000004
 8001850:	431bde83 	.word	0x431bde83

08001854 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800185c:	4b79      	ldr	r3, [pc, #484]	; (8001a44 <ADC_Init+0x1f0>)
 800185e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	431a      	orrs	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	021a      	lsls	r2, r3, #8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6899      	ldr	r1, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <ADC_Init+0x1f4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d022      	beq.n	8001932 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6899      	ldr	r1, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800191c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6899      	ldr	r1, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	e00f      	b.n	8001952 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001950:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0202 	bic.w	r2, r2, #2
 8001960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6899      	ldr	r1, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7e1b      	ldrb	r3, [r3, #24]
 800196c:	005a      	lsls	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01b      	beq.n	80019b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800198e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800199e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6859      	ldr	r1, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	3b01      	subs	r3, #1
 80019ac:	035a      	lsls	r2, r3, #13
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	e007      	b.n	80019c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	051a      	lsls	r2, r3, #20
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a0a:	025a      	lsls	r2, r3, #9
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6899      	ldr	r1, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	029a      	lsls	r2, r3, #10
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	609a      	str	r2, [r3, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40012300 	.word	0x40012300
 8001a48:	0f000001 	.word	0x0f000001

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff8e 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff29 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c14:	f7ff ff3e 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f7ff ff8e 	bl	8001b40 <NVIC_EncodePriority>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff5d 	bl	8001aec <__NVIC_SetPriority>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff31 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffa2 	bl	8001ba8 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_DMA_Start_IT+0x26>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e040      	b.n	8001d16 <HAL_DMA_Start_IT+0xa8>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d12f      	bne.n	8001d08 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 f82e 	bl	8001d1e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	223f      	movs	r2, #63	; 0x3f
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0216 	orr.w	r2, r2, #22
 8001cdc:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0208 	orr.w	r2, r2, #8
 8001cf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e005      	b.n	8001d14 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
 8001d12:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b40      	cmp	r3, #64	; 0x40
 8001d4a:	d108      	bne.n	8001d5e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d5c:	e007      	b.n	8001d6e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	60da      	str	r2, [r3, #12]
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e16b      	b.n	8002070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 815a 	bne.w	800206a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d005      	beq.n	8001dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d130      	bne.n	8001e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0201 	and.w	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d017      	beq.n	8001e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d123      	bne.n	8001ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80b4 	beq.w	800206a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b60      	ldr	r3, [pc, #384]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a5f      	ldr	r2, [pc, #380]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_GPIO_Init+0x310>)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_GPIO_Init+0x314>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d02b      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a51      	ldr	r2, [pc, #324]	; (8002094 <HAL_GPIO_Init+0x318>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d025      	beq.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a50      	ldr	r2, [pc, #320]	; (8002098 <HAL_GPIO_Init+0x31c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01f      	beq.n	8001f9a <HAL_GPIO_Init+0x21e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4f      	ldr	r2, [pc, #316]	; (800209c <HAL_GPIO_Init+0x320>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d019      	beq.n	8001f96 <HAL_GPIO_Init+0x21a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4e      	ldr	r2, [pc, #312]	; (80020a0 <HAL_GPIO_Init+0x324>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_GPIO_Init+0x216>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4d      	ldr	r2, [pc, #308]	; (80020a4 <HAL_GPIO_Init+0x328>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00d      	beq.n	8001f8e <HAL_GPIO_Init+0x212>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <HAL_GPIO_Init+0x32c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d007      	beq.n	8001f8a <HAL_GPIO_Init+0x20e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	; (80020ac <HAL_GPIO_Init+0x330>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <HAL_GPIO_Init+0x20a>
 8001f82:	2307      	movs	r3, #7
 8001f84:	e00e      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f86:	2308      	movs	r3, #8
 8001f88:	e00c      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f8a:	2306      	movs	r3, #6
 8001f8c:	e00a      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f8e:	2305      	movs	r3, #5
 8001f90:	e008      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f92:	2304      	movs	r3, #4
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f96:	2303      	movs	r3, #3
 8001f98:	e004      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	f002 0203 	and.w	r2, r2, #3
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	4093      	lsls	r3, r2
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb4:	4935      	ldr	r1, [pc, #212]	; (800208c <HAL_GPIO_Init+0x310>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fe6:	4a32      	ldr	r2, [pc, #200]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fec:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800203a:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_GPIO_Init+0x334>)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002064:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3301      	adds	r3, #1
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b0f      	cmp	r3, #15
 8002074:	f67f ae90 	bls.w	8001d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40013800 	.word	0x40013800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020400 	.word	0x40020400
 8002098:	40020800 	.word	0x40020800
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40021400 	.word	0x40021400
 80020a8:	40021800 	.word	0x40021800
 80020ac:	40021c00 	.word	0x40021c00
 80020b0:	40013c00 	.word	0x40013c00

080020b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020d0:	e003      	b.n	80020da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020d2:	887b      	ldrh	r3, [r7, #2]
 80020d4:	041a      	lsls	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	619a      	str	r2, [r3, #24]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f8:	887a      	ldrh	r2, [r7, #2]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	041a      	lsls	r2, r3, #16
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43d9      	mvns	r1, r3
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	400b      	ands	r3, r1
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	619a      	str	r2, [r3, #24]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e12b      	b.n	8002386 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe fff6 	bl	8001134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2224      	movs	r2, #36	; 0x24
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800216e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800217e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002180:	f002 fa96 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8002184:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4a81      	ldr	r2, [pc, #516]	; (8002390 <HAL_I2C_Init+0x274>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d807      	bhi.n	80021a0 <HAL_I2C_Init+0x84>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4a80      	ldr	r2, [pc, #512]	; (8002394 <HAL_I2C_Init+0x278>)
 8002194:	4293      	cmp	r3, r2
 8002196:	bf94      	ite	ls
 8002198:	2301      	movls	r3, #1
 800219a:	2300      	movhi	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	e006      	b.n	80021ae <HAL_I2C_Init+0x92>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4a7d      	ldr	r2, [pc, #500]	; (8002398 <HAL_I2C_Init+0x27c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	bf94      	ite	ls
 80021a8:	2301      	movls	r3, #1
 80021aa:	2300      	movhi	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0e7      	b.n	8002386 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4a78      	ldr	r2, [pc, #480]	; (800239c <HAL_I2C_Init+0x280>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	0c9b      	lsrs	r3, r3, #18
 80021c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a6a      	ldr	r2, [pc, #424]	; (8002390 <HAL_I2C_Init+0x274>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d802      	bhi.n	80021f0 <HAL_I2C_Init+0xd4>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3301      	adds	r3, #1
 80021ee:	e009      	b.n	8002204 <HAL_I2C_Init+0xe8>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	4a69      	ldr	r2, [pc, #420]	; (80023a0 <HAL_I2C_Init+0x284>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	3301      	adds	r3, #1
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	430b      	orrs	r3, r1
 800220a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002216:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	495c      	ldr	r1, [pc, #368]	; (8002390 <HAL_I2C_Init+0x274>)
 8002220:	428b      	cmp	r3, r1
 8002222:	d819      	bhi.n	8002258 <HAL_I2C_Init+0x13c>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e59      	subs	r1, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002232:	1c59      	adds	r1, r3, #1
 8002234:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002238:	400b      	ands	r3, r1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_I2C_Init+0x138>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1e59      	subs	r1, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fbb1 f3f3 	udiv	r3, r1, r3
 800224c:	3301      	adds	r3, #1
 800224e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002252:	e051      	b.n	80022f8 <HAL_I2C_Init+0x1dc>
 8002254:	2304      	movs	r3, #4
 8002256:	e04f      	b.n	80022f8 <HAL_I2C_Init+0x1dc>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d111      	bne.n	8002284 <HAL_I2C_Init+0x168>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1e58      	subs	r0, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	440b      	add	r3, r1
 800226e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002272:	3301      	adds	r3, #1
 8002274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e012      	b.n	80022aa <HAL_I2C_Init+0x18e>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1e58      	subs	r0, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	0099      	lsls	r1, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	fbb0 f3f3 	udiv	r3, r0, r3
 800229a:	3301      	adds	r3, #1
 800229c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Init+0x196>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e022      	b.n	80022f8 <HAL_I2C_Init+0x1dc>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10e      	bne.n	80022d8 <HAL_I2C_Init+0x1bc>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1e58      	subs	r0, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6859      	ldr	r1, [r3, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	440b      	add	r3, r1
 80022c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d6:	e00f      	b.n	80022f8 <HAL_I2C_Init+0x1dc>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1e58      	subs	r0, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	0099      	lsls	r1, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	6809      	ldr	r1, [r1, #0]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002326:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6911      	ldr	r1, [r2, #16]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68d2      	ldr	r2, [r2, #12]
 8002332:	4311      	orrs	r1, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	430b      	orrs	r3, r1
 800233a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	000186a0 	.word	0x000186a0
 8002394:	001e847f 	.word	0x001e847f
 8002398:	003d08ff 	.word	0x003d08ff
 800239c:	431bde83 	.word	0x431bde83
 80023a0:	10624dd3 	.word	0x10624dd3

080023a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	4608      	mov	r0, r1
 80023ae:	4611      	mov	r1, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	4603      	mov	r3, r0
 80023b4:	817b      	strh	r3, [r7, #10]
 80023b6:	460b      	mov	r3, r1
 80023b8:	813b      	strh	r3, [r7, #8]
 80023ba:	4613      	mov	r3, r2
 80023bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023be:	f7ff f8d7 	bl	8001570 <HAL_GetTick>
 80023c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b20      	cmp	r3, #32
 80023ce:	f040 80d9 	bne.w	8002584 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	2319      	movs	r3, #25
 80023d8:	2201      	movs	r2, #1
 80023da:	496d      	ldr	r1, [pc, #436]	; (8002590 <HAL_I2C_Mem_Write+0x1ec>)
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fc7f 	bl	8002ce0 <I2C_WaitOnFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
 80023ea:	e0cc      	b.n	8002586 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_I2C_Mem_Write+0x56>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e0c5      	b.n	8002586 <HAL_I2C_Mem_Write+0x1e2>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d007      	beq.n	8002420 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2221      	movs	r2, #33	; 0x21
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2240      	movs	r2, #64	; 0x40
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a3a      	ldr	r2, [r7, #32]
 800244a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002450:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a4d      	ldr	r2, [pc, #308]	; (8002594 <HAL_I2C_Mem_Write+0x1f0>)
 8002460:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002462:	88f8      	ldrh	r0, [r7, #6]
 8002464:	893a      	ldrh	r2, [r7, #8]
 8002466:	8979      	ldrh	r1, [r7, #10]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	4603      	mov	r3, r0
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fab6 	bl	80029e4 <I2C_RequestMemoryWrite>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d052      	beq.n	8002524 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e081      	b.n	8002586 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fd00 	bl	8002e8c <I2C_WaitOnTXEFlagUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00d      	beq.n	80024ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	2b04      	cmp	r3, #4
 8002498:	d107      	bne.n	80024aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e06b      	b.n	8002586 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d11b      	bne.n	8002524 <HAL_I2C_Mem_Write+0x180>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d017      	beq.n	8002524 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1aa      	bne.n	8002482 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fcec 	bl	8002f0e <I2C_WaitOnBTFFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00d      	beq.n	8002558 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	2b04      	cmp	r3, #4
 8002542:	d107      	bne.n	8002554 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002552:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e016      	b.n	8002586 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	e000      	b.n	8002586 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002584:	2302      	movs	r3, #2
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	00100002 	.word	0x00100002
 8002594:	ffff0000 	.word	0xffff0000

08002598 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	; 0x30
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	4608      	mov	r0, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	817b      	strh	r3, [r7, #10]
 80025aa:	460b      	mov	r3, r1
 80025ac:	813b      	strh	r3, [r7, #8]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025b2:	f7fe ffdd 	bl	8001570 <HAL_GetTick>
 80025b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	f040 8208 	bne.w	80029d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2319      	movs	r3, #25
 80025cc:	2201      	movs	r2, #1
 80025ce:	497b      	ldr	r1, [pc, #492]	; (80027bc <HAL_I2C_Mem_Read+0x224>)
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 fb85 	bl	8002ce0 <I2C_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
 80025de:	e1fb      	b.n	80029d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_I2C_Mem_Read+0x56>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e1f4      	b.n	80029d8 <HAL_I2C_Mem_Read+0x440>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d007      	beq.n	8002614 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002622:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2222      	movs	r2, #34	; 0x22
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2240      	movs	r2, #64	; 0x40
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800263e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a5b      	ldr	r2, [pc, #364]	; (80027c0 <HAL_I2C_Mem_Read+0x228>)
 8002654:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002656:	88f8      	ldrh	r0, [r7, #6]
 8002658:	893a      	ldrh	r2, [r7, #8]
 800265a:	8979      	ldrh	r1, [r7, #10]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4603      	mov	r3, r0
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fa52 	bl	8002b10 <I2C_RequestMemoryRead>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e1b0      	b.n	80029d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	2b00      	cmp	r3, #0
 800267c:	d113      	bne.n	80026a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	623b      	str	r3, [r7, #32]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	623b      	str	r3, [r7, #32]
 8002692:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e184      	b.n	80029b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d11b      	bne.n	80026e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e164      	b.n	80029b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d11b      	bne.n	8002726 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	e144      	b.n	80029b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800273c:	e138      	b.n	80029b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	2b03      	cmp	r3, #3
 8002744:	f200 80f1 	bhi.w	800292a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	2b01      	cmp	r3, #1
 800274e:	d123      	bne.n	8002798 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002752:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fc1b 	bl	8002f90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e139      	b.n	80029d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002796:	e10b      	b.n	80029b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	2b02      	cmp	r3, #2
 800279e:	d14e      	bne.n	800283e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	2200      	movs	r2, #0
 80027a8:	4906      	ldr	r1, [pc, #24]	; (80027c4 <HAL_I2C_Mem_Read+0x22c>)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fa98 	bl	8002ce0 <I2C_WaitOnFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e10e      	b.n	80029d8 <HAL_I2C_Mem_Read+0x440>
 80027ba:	bf00      	nop
 80027bc:	00100002 	.word	0x00100002
 80027c0:	ffff0000 	.word	0xffff0000
 80027c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800283c:	e0b8      	b.n	80029b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	2200      	movs	r2, #0
 8002846:	4966      	ldr	r1, [pc, #408]	; (80029e0 <HAL_I2C_Mem_Read+0x448>)
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fa49 	bl	8002ce0 <I2C_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0bf      	b.n	80029d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	2200      	movs	r2, #0
 80028a2:	494f      	ldr	r1, [pc, #316]	; (80029e0 <HAL_I2C_Mem_Read+0x448>)
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fa1b 	bl	8002ce0 <I2C_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e091      	b.n	80029d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002928:	e042      	b.n	80029b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fb2e 	bl	8002f90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e04c      	b.n	80029d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d118      	bne.n	80029b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f47f aec2 	bne.w	800273e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e000      	b.n	80029d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3728      	adds	r7, #40	; 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	00010004 	.word	0x00010004

080029e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	460b      	mov	r3, r1
 80029f8:	813b      	strh	r3, [r7, #8]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f960 	bl	8002ce0 <I2C_WaitOnFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00d      	beq.n	8002a42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a34:	d103      	bne.n	8002a3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e05f      	b.n	8002b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a42:	897b      	ldrh	r3, [r7, #10]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	6a3a      	ldr	r2, [r7, #32]
 8002a56:	492d      	ldr	r1, [pc, #180]	; (8002b0c <I2C_RequestMemoryWrite+0x128>)
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f998 	bl	8002d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e04c      	b.n	8002b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a80:	6a39      	ldr	r1, [r7, #32]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fa02 	bl	8002e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d107      	bne.n	8002aa6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e02b      	b.n	8002b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d105      	bne.n	8002abc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab0:	893b      	ldrh	r3, [r7, #8]
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	611a      	str	r2, [r3, #16]
 8002aba:	e021      	b.n	8002b00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002abc:	893b      	ldrh	r3, [r7, #8]
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002acc:	6a39      	ldr	r1, [r7, #32]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f9dc 	bl	8002e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d107      	bne.n	8002af2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e005      	b.n	8002b02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002af6:	893b      	ldrh	r3, [r7, #8]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	00010002 	.word	0x00010002

08002b10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4603      	mov	r3, r0
 8002b20:	817b      	strh	r3, [r7, #10]
 8002b22:	460b      	mov	r3, r1
 8002b24:	813b      	strh	r3, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f8c2 	bl	8002ce0 <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b70:	d103      	bne.n	8002b7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0aa      	b.n	8002cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b7e:	897b      	ldrh	r3, [r7, #10]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	6a3a      	ldr	r2, [r7, #32]
 8002b92:	4952      	ldr	r1, [pc, #328]	; (8002cdc <I2C_RequestMemoryRead+0x1cc>)
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f8fa 	bl	8002d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e097      	b.n	8002cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbc:	6a39      	ldr	r1, [r7, #32]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f964 	bl	8002e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d107      	bne.n	8002be2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e076      	b.n	8002cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d105      	bne.n	8002bf8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bec:	893b      	ldrh	r3, [r7, #8]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	611a      	str	r2, [r3, #16]
 8002bf6:	e021      	b.n	8002c3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bf8:	893b      	ldrh	r3, [r7, #8]
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c08:	6a39      	ldr	r1, [r7, #32]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f93e 	bl	8002e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00d      	beq.n	8002c32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d107      	bne.n	8002c2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e050      	b.n	8002cd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c32:	893b      	ldrh	r3, [r7, #8]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3e:	6a39      	ldr	r1, [r7, #32]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f923 	bl	8002e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d107      	bne.n	8002c64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e035      	b.n	8002cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f82b 	bl	8002ce0 <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00d      	beq.n	8002cac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9e:	d103      	bne.n	8002ca8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e013      	b.n	8002cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cac:	897b      	ldrh	r3, [r7, #10]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	6a3a      	ldr	r2, [r7, #32]
 8002cc0:	4906      	ldr	r1, [pc, #24]	; (8002cdc <I2C_RequestMemoryRead+0x1cc>)
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f863 	bl	8002d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	00010002 	.word	0x00010002

08002ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	4613      	mov	r3, r2
 8002cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cf0:	e025      	b.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d021      	beq.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfa:	f7fe fc39 	bl	8001570 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d302      	bcc.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d116      	bne.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e023      	b.n	8002d86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	0c1b      	lsrs	r3, r3, #16
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d10d      	bne.n	8002d64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4013      	ands	r3, r2
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	e00c      	b.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf0c      	ite	eq
 8002d76:	2301      	moveq	r3, #1
 8002d78:	2300      	movne	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d0b6      	beq.n	8002cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d9c:	e051      	b.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dac:	d123      	bne.n	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f043 0204 	orr.w	r2, r3, #4
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e046      	b.n	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d021      	beq.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfe:	f7fe fbb7 	bl	8001570 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d116      	bne.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e020      	b.n	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10c      	bne.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4013      	ands	r3, r2
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf14      	ite	ne
 8002e5e:	2301      	movne	r3, #1
 8002e60:	2300      	moveq	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	e00b      	b.n	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4013      	ands	r3, r2
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d18d      	bne.n	8002d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e98:	e02d      	b.n	8002ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f8ce 	bl	800303c <I2C_IsAcknowledgeFailed>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e02d      	b.n	8002f06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d021      	beq.n	8002ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb2:	f7fe fb5d 	bl	8001570 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d116      	bne.n	8002ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0220 	orr.w	r2, r3, #32
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e007      	b.n	8002f06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d1ca      	bne.n	8002e9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f1a:	e02d      	b.n	8002f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f88d 	bl	800303c <I2C_IsAcknowledgeFailed>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e02d      	b.n	8002f88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d021      	beq.n	8002f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f34:	f7fe fb1c 	bl	8001570 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d302      	bcc.n	8002f4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d116      	bne.n	8002f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e007      	b.n	8002f88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d1ca      	bne.n	8002f1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f9c:	e042      	b.n	8003024 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d119      	bne.n	8002fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0210 	mvn.w	r2, #16
 8002fb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e029      	b.n	8003034 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe0:	f7fe fac6 	bl	8001570 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d302      	bcc.n	8002ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d116      	bne.n	8003024 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e007      	b.n	8003034 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d1b5      	bne.n	8002f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003052:	d11b      	bne.n	800308c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800305c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e128      	b.n	8003300 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a90      	ldr	r2, [pc, #576]	; (8003308 <HAL_I2S_Init+0x26c>)
 80030c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fe f87b 	bl	80011c4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030e4:	f023 030f 	bic.w	r3, r3, #15
 80030e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2202      	movs	r2, #2
 80030f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d060      	beq.n	80031bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003102:	2310      	movs	r3, #16
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e001      	b.n	800310c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003108:	2320      	movs	r3, #32
 800310a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b20      	cmp	r3, #32
 8003112:	d802      	bhi.n	800311a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800311a:	2001      	movs	r0, #1
 800311c:	f001 fbd2 	bl	80048c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003120:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312a:	d125      	bne.n	8003178 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d010      	beq.n	8003156 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	fbb2 f2f3 	udiv	r2, r2, r3
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	461a      	mov	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	3305      	adds	r3, #5
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	e01f      	b.n	8003196 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	3305      	adds	r3, #5
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	e00e      	b.n	8003196 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	461a      	mov	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	3305      	adds	r3, #5
 8003194:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4a5c      	ldr	r2, [pc, #368]	; (800330c <HAL_I2S_Init+0x270>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	08db      	lsrs	r3, r3, #3
 80031a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	e003      	b.n	80031c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031bc:	2302      	movs	r3, #2
 80031be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d902      	bls.n	80031d0 <HAL_I2S_Init+0x134>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2bff      	cmp	r3, #255	; 0xff
 80031ce:	d907      	bls.n	80031e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	f043 0210 	orr.w	r2, r3, #16
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e08f      	b.n	8003300 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	ea42 0103 	orr.w	r1, r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031fe:	f023 030f 	bic.w	r3, r3, #15
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6851      	ldr	r1, [r2, #4]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6892      	ldr	r2, [r2, #8]
 800320a:	4311      	orrs	r1, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68d2      	ldr	r2, [r2, #12]
 8003210:	4311      	orrs	r1, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6992      	ldr	r2, [r2, #24]
 8003216:	430a      	orrs	r2, r1
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003222:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d161      	bne.n	80032f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a38      	ldr	r2, [pc, #224]	; (8003310 <HAL_I2S_Init+0x274>)
 8003230:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a37      	ldr	r2, [pc, #220]	; (8003314 <HAL_I2S_Init+0x278>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_I2S_Init+0x1a4>
 800323c:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_I2S_Init+0x27c>)
 800323e:	e001      	b.n	8003244 <HAL_I2S_Init+0x1a8>
 8003240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	4932      	ldr	r1, [pc, #200]	; (8003314 <HAL_I2S_Init+0x278>)
 800324c:	428a      	cmp	r2, r1
 800324e:	d101      	bne.n	8003254 <HAL_I2S_Init+0x1b8>
 8003250:	4a31      	ldr	r2, [pc, #196]	; (8003318 <HAL_I2S_Init+0x27c>)
 8003252:	e001      	b.n	8003258 <HAL_I2S_Init+0x1bc>
 8003254:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003258:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800325c:	f023 030f 	bic.w	r3, r3, #15
 8003260:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <HAL_I2S_Init+0x278>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d101      	bne.n	8003270 <HAL_I2S_Init+0x1d4>
 800326c:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <HAL_I2S_Init+0x27c>)
 800326e:	e001      	b.n	8003274 <HAL_I2S_Init+0x1d8>
 8003270:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003274:	2202      	movs	r2, #2
 8003276:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a25      	ldr	r2, [pc, #148]	; (8003314 <HAL_I2S_Init+0x278>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_I2S_Init+0x1ea>
 8003282:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_I2S_Init+0x27c>)
 8003284:	e001      	b.n	800328a <HAL_I2S_Init+0x1ee>
 8003286:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003296:	d003      	beq.n	80032a0 <HAL_I2S_Init+0x204>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d103      	bne.n	80032a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	e001      	b.n	80032ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032b6:	4313      	orrs	r3, r2
 80032b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032c0:	4313      	orrs	r3, r2
 80032c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032ca:	4313      	orrs	r3, r2
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <HAL_I2S_Init+0x278>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d101      	bne.n	80032e8 <HAL_I2S_Init+0x24c>
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_I2S_Init+0x27c>)
 80032e6:	e001      	b.n	80032ec <HAL_I2S_Init+0x250>
 80032e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032ec:	897a      	ldrh	r2, [r7, #10]
 80032ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3720      	adds	r7, #32
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	08003413 	.word	0x08003413
 800330c:	cccccccd 	.word	0xcccccccd
 8003310:	0800383d 	.word	0x0800383d
 8003314:	40003800 	.word	0x40003800
 8003318:	40003400 	.word	0x40003400

0800331c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	881a      	ldrh	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	1c9a      	adds	r2, r3, #2
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10e      	bne.n	80033ac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800339c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff ffb8 	bl	800331c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	b292      	uxth	r2, r2
 80033c8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	1c9a      	adds	r2, r3, #2
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10e      	bne.n	800340a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033fa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff ff93 	bl	8003330 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b04      	cmp	r3, #4
 800342c:	d13a      	bne.n	80034a4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d109      	bne.n	800344c <I2S_IRQHandler+0x3a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d102      	bne.n	800344c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff ffb4 	bl	80033b4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d126      	bne.n	80034a4 <I2S_IRQHandler+0x92>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b20      	cmp	r3, #32
 8003462:	d11f      	bne.n	80034a4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003472:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f043 0202 	orr.w	r2, r3, #2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ff50 	bl	8003344 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d136      	bne.n	800351e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d109      	bne.n	80034ce <I2S_IRQHandler+0xbc>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d102      	bne.n	80034ce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff45 	bl	8003358 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d122      	bne.n	800351e <I2S_IRQHandler+0x10c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d11b      	bne.n	800351e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0204 	orr.w	r2, r3, #4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff13 	bl	8003344 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d002      	beq.n	8003554 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 800354e:	2302      	movs	r3, #2
 8003550:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003552:	e160      	b.n	8003816 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003560:	887b      	ldrh	r3, [r7, #2]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e15a      	b.n	8003820 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8003576:	2302      	movs	r3, #2
 8003578:	e152      	b.n	8003820 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d002      	beq.n	80035a6 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d114      	bne.n	80035d0 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80035c4:	887b      	ldrh	r3, [r7, #2]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	865a      	strh	r2, [r3, #50]	; 0x32
 80035ce:	e00b      	b.n	80035e8 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	887a      	ldrh	r2, [r7, #2]
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	887a      	ldrh	r2, [r7, #2]
 80035e6:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2205      	movs	r2, #5
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	4a8b      	ldr	r2, [pc, #556]	; (8003828 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	4a8a      	ldr	r2, [pc, #552]	; (800382c <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	4a89      	ldr	r2, [pc, #548]	; (8003830 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 800360c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	2200      	movs	r2, #0
 8003614:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	2200      	movs	r2, #0
 800361c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	4a83      	ldr	r2, [pc, #524]	; (8003830 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003624:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003630:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003638:	d002      	beq.n	8003640 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d16b      	bne.n	8003718 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a79      	ldr	r2, [pc, #484]	; (8003834 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d101      	bne.n	8003656 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8003652:	4b79      	ldr	r3, [pc, #484]	; (8003838 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003654:	e001      	b.n	800365a <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8003656:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365a:	330c      	adds	r3, #12
 800365c:	4619      	mov	r1, r3
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003666:	b29b      	uxth	r3, r3
 8003668:	f7fe fb01 	bl	8001c6e <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a70      	ldr	r2, [pc, #448]	; (8003834 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8003676:	4b70      	ldr	r3, [pc, #448]	; (8003838 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003678:	e001      	b.n	800367e <HAL_I2SEx_TransmitReceive_DMA+0x156>
 800367a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	496b      	ldr	r1, [pc, #428]	; (8003834 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003686:	428b      	cmp	r3, r1
 8003688:	d101      	bne.n	800368e <HAL_I2SEx_TransmitReceive_DMA+0x166>
 800368a:	4b6b      	ldr	r3, [pc, #428]	; (8003838 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800368c:	e001      	b.n	8003692 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 800368e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003698:	f107 0308 	add.w	r3, r7, #8
 800369c:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	461a      	mov	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f7fe fadb 	bl	8001c6e <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0202 	orr.w	r2, r2, #2
 80036c6:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	f000 809e 	beq.w	8003816 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a55      	ldr	r2, [pc, #340]	; (8003834 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d101      	bne.n	80036e8 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80036e4:	4b54      	ldr	r3, [pc, #336]	; (8003838 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80036e6:	e001      	b.n	80036ec <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80036e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4950      	ldr	r1, [pc, #320]	; (8003834 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80036f4:	428b      	cmp	r3, r1
 80036f6:	d101      	bne.n	80036fc <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80036f8:	4b4f      	ldr	r3, [pc, #316]	; (8003838 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80036fa:	e001      	b.n	8003700 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80036fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003704:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003714:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003716:	e07e      	b.n	8003816 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003726:	d10a      	bne.n	800373e <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800373e:	f107 0308 	add.w	r3, r7, #8
 8003742:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6819      	ldr	r1, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a38      	ldr	r2, [pc, #224]	; (8003834 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8003756:	4b38      	ldr	r3, [pc, #224]	; (8003838 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003758:	e001      	b.n	800375e <HAL_I2SEx_TransmitReceive_DMA+0x236>
 800375a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375e:	330c      	adds	r3, #12
 8003760:	461a      	mov	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	b29b      	uxth	r3, r3
 8003768:	f7fe fa81 	bl	8001c6e <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a30      	ldr	r2, [pc, #192]	; (8003834 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d101      	bne.n	800377a <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8003776:	4b30      	ldr	r3, [pc, #192]	; (8003838 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003778:	e001      	b.n	800377e <HAL_I2SEx_TransmitReceive_DMA+0x256>
 800377a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	492b      	ldr	r1, [pc, #172]	; (8003834 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003786:	428b      	cmp	r3, r1
 8003788:	d101      	bne.n	800378e <HAL_I2SEx_TransmitReceive_DMA+0x266>
 800378a:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800378c:	e001      	b.n	8003792 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 800378e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003792:	f042 0202 	orr.w	r2, r2, #2
 8003796:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	4619      	mov	r1, r3
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f7fe fa5c 	bl	8001c6e <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d4:	d01e      	beq.n	8003814 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a16      	ldr	r2, [pc, #88]	; (8003834 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80037e0:	4b15      	ldr	r3, [pc, #84]	; (8003838 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80037e2:	e001      	b.n	80037e8 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80037e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4911      	ldr	r1, [pc, #68]	; (8003834 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80037f0:	428b      	cmp	r3, r1
 80037f2:	d101      	bne.n	80037f8 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80037f4:	4b10      	ldr	r3, [pc, #64]	; (8003838 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80037f6:	e001      	b.n	80037fc <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80037f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003800:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003810:	61da      	str	r2, [r3, #28]
 8003812:	e000      	b.n	8003816 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8003814:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 800381e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	08003ae5 	.word	0x08003ae5
 800382c:	08003b01 	.word	0x08003b01
 8003830:	08003bd9 	.word	0x08003bd9
 8003834:	40003800 	.word	0x40003800
 8003838:	40003400 	.word	0x40003400

0800383c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a92      	ldr	r2, [pc, #584]	; (8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003856:	4b92      	ldr	r3, [pc, #584]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003858:	e001      	b.n	800385e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800385a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a8b      	ldr	r2, [pc, #556]	; (8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d101      	bne.n	8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003874:	4b8a      	ldr	r3, [pc, #552]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003876:	e001      	b.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003888:	d004      	beq.n	8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f040 8099 	bne.w	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b02      	cmp	r3, #2
 800389c:	d107      	bne.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f9d5 	bl	8003c58 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d107      	bne.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fa78 	bl	8003db8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d13a      	bne.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d035      	beq.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a6e      	ldr	r2, [pc, #440]	; (8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80038e6:	4b6e      	ldr	r3, [pc, #440]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038e8:	e001      	b.n	80038ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4969      	ldr	r1, [pc, #420]	; (8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038f6:	428b      	cmp	r3, r1
 80038f8:	d101      	bne.n	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038fa:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038fc:	e001      	b.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003902:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003906:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003916:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f043 0202 	orr.w	r2, r3, #2
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fcfe 	bl	8003344 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b08      	cmp	r3, #8
 8003950:	f040 80c3 	bne.w	8003ada <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80bd 	beq.w	8003ada <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800396e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a49      	ldr	r2, [pc, #292]	; (8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800397a:	4b49      	ldr	r3, [pc, #292]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800397c:	e001      	b.n	8003982 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800397e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4944      	ldr	r1, [pc, #272]	; (8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800398a:	428b      	cmp	r3, r1
 800398c:	d101      	bne.n	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800398e:	4b44      	ldr	r3, [pc, #272]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003990:	e001      	b.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003996:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800399a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800399c:	2300      	movs	r3, #0
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f043 0204 	orr.w	r2, r3, #4
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fcc0 	bl	8003344 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039c4:	e089      	b.n	8003ada <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d107      	bne.n	80039e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f96e 	bl	8003cbc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d107      	bne.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f9ad 	bl	8003d54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d12f      	bne.n	8003a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d02a      	beq.n	8003a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a1c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d101      	bne.n	8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a2a:	e001      	b.n	8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4919      	ldr	r1, [pc, #100]	; (8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a3c:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a3e:	e001      	b.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	f043 0202 	orr.w	r2, r3, #2
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fc70 	bl	8003344 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d136      	bne.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d031      	beq.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a84:	e001      	b.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4902      	ldr	r1, [pc, #8]	; (8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a92:	428b      	cmp	r3, r1
 8003a94:	d106      	bne.n	8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a96:	4b02      	ldr	r3, [pc, #8]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a98:	e006      	b.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a9a:	bf00      	nop
 8003a9c:	40003800 	.word	0x40003800
 8003aa0:	40003400 	.word	0x40003400
 8003aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003abc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f043 0204 	orr.w	r2, r3, #4
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fc36 	bl	8003344 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ad8:	e000      	b.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ada:	bf00      	nop
}
 8003adc:	bf00      	nop
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7fc ff38 	bl	8000968 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d155      	bne.n	8003bc2 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b24:	d006      	beq.n	8003b34 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d11e      	bne.n	8003b72 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a25      	ldr	r2, [pc, #148]	; (8003bd0 <I2SEx_TxRxDMACplt+0xd0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <I2SEx_TxRxDMACplt+0x42>
 8003b3e:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <I2SEx_TxRxDMACplt+0xd4>)
 8003b40:	e001      	b.n	8003b46 <I2SEx_TxRxDMACplt+0x46>
 8003b42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4920      	ldr	r1, [pc, #128]	; (8003bd0 <I2SEx_TxRxDMACplt+0xd0>)
 8003b4e:	428b      	cmp	r3, r1
 8003b50:	d101      	bne.n	8003b56 <I2SEx_TxRxDMACplt+0x56>
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <I2SEx_TxRxDMACplt+0xd4>)
 8003b54:	e001      	b.n	8003b5a <I2SEx_TxRxDMACplt+0x5a>
 8003b56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0202 	bic.w	r2, r2, #2
 8003b6e:	605a      	str	r2, [r3, #4]
 8003b70:	e01d      	b.n	8003bae <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a12      	ldr	r2, [pc, #72]	; (8003bd0 <I2SEx_TxRxDMACplt+0xd0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <I2SEx_TxRxDMACplt+0x90>
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <I2SEx_TxRxDMACplt+0xd4>)
 8003b8e:	e001      	b.n	8003b94 <I2SEx_TxRxDMACplt+0x94>
 8003b90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	490d      	ldr	r1, [pc, #52]	; (8003bd0 <I2SEx_TxRxDMACplt+0xd0>)
 8003b9c:	428b      	cmp	r3, r1
 8003b9e:	d101      	bne.n	8003ba4 <I2SEx_TxRxDMACplt+0xa4>
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <I2SEx_TxRxDMACplt+0xd4>)
 8003ba2:	e001      	b.n	8003ba8 <I2SEx_TxRxDMACplt+0xa8>
 8003ba4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba8:	f022 0202 	bic.w	r2, r2, #2
 8003bac:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7fc feee 	bl	80009a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40003800 	.word	0x40003800
 8003bd4:	40003400 	.word	0x40003400

08003bd8 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0203 	bic.w	r2, r2, #3
 8003bf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <I2SEx_TxRxDMAError+0x78>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <I2SEx_TxRxDMAError+0x2c>
 8003c00:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <I2SEx_TxRxDMAError+0x7c>)
 8003c02:	e001      	b.n	8003c08 <I2SEx_TxRxDMAError+0x30>
 8003c04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4910      	ldr	r1, [pc, #64]	; (8003c50 <I2SEx_TxRxDMAError+0x78>)
 8003c10:	428b      	cmp	r3, r1
 8003c12:	d101      	bne.n	8003c18 <I2SEx_TxRxDMAError+0x40>
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <I2SEx_TxRxDMAError+0x7c>)
 8003c16:	e001      	b.n	8003c1c <I2SEx_TxRxDMAError+0x44>
 8003c18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1c:	f022 0203 	bic.w	r2, r2, #3
 8003c20:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	f043 0208 	orr.w	r2, r3, #8
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff fb7e 	bl	8003344 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40003800 	.word	0x40003800
 8003c54:	40003400 	.word	0x40003400

08003c58 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	1c99      	adds	r1, r3, #2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6251      	str	r1, [r2, #36]	; 0x24
 8003c6a:	881a      	ldrh	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d113      	bne.n	8003cb2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7fc fe79 	bl	80009a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	1c99      	adds	r1, r3, #2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6251      	str	r1, [r2, #36]	; 0x24
 8003cce:	8819      	ldrh	r1, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <I2SEx_TxISR_I2SExt+0x90>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <I2SEx_TxISR_I2SExt+0x22>
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <I2SEx_TxISR_I2SExt+0x94>)
 8003cdc:	e001      	b.n	8003ce2 <I2SEx_TxISR_I2SExt+0x26>
 8003cde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d121      	bne.n	8003d42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <I2SEx_TxISR_I2SExt+0x90>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d101      	bne.n	8003d0c <I2SEx_TxISR_I2SExt+0x50>
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <I2SEx_TxISR_I2SExt+0x94>)
 8003d0a:	e001      	b.n	8003d10 <I2SEx_TxISR_I2SExt+0x54>
 8003d0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	490d      	ldr	r1, [pc, #52]	; (8003d4c <I2SEx_TxISR_I2SExt+0x90>)
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	d101      	bne.n	8003d20 <I2SEx_TxISR_I2SExt+0x64>
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <I2SEx_TxISR_I2SExt+0x94>)
 8003d1e:	e001      	b.n	8003d24 <I2SEx_TxISR_I2SExt+0x68>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fc fe31 	bl	80009a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40003800 	.word	0x40003800
 8003d50:	40003400 	.word	0x40003400

08003d54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68d8      	ldr	r0, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	1c99      	adds	r1, r3, #2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d6c:	b282      	uxth	r2, r0
 8003d6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d113      	bne.n	8003db0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fc fdfa 	bl	80009a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a20      	ldr	r2, [pc, #128]	; (8003e48 <I2SEx_RxISR_I2SExt+0x90>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d101      	bne.n	8003dce <I2SEx_RxISR_I2SExt+0x16>
 8003dca:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <I2SEx_RxISR_I2SExt+0x94>)
 8003dcc:	e001      	b.n	8003dd2 <I2SEx_RxISR_I2SExt+0x1a>
 8003dce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd2:	68d8      	ldr	r0, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	1c99      	adds	r1, r3, #2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003dde:	b282      	uxth	r2, r0
 8003de0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d121      	bne.n	8003e3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <I2SEx_RxISR_I2SExt+0x90>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <I2SEx_RxISR_I2SExt+0x50>
 8003e04:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <I2SEx_RxISR_I2SExt+0x94>)
 8003e06:	e001      	b.n	8003e0c <I2SEx_RxISR_I2SExt+0x54>
 8003e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	490d      	ldr	r1, [pc, #52]	; (8003e48 <I2SEx_RxISR_I2SExt+0x90>)
 8003e14:	428b      	cmp	r3, r1
 8003e16:	d101      	bne.n	8003e1c <I2SEx_RxISR_I2SExt+0x64>
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <I2SEx_RxISR_I2SExt+0x94>)
 8003e1a:	e001      	b.n	8003e20 <I2SEx_RxISR_I2SExt+0x68>
 8003e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7fc fdb3 	bl	80009a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40003800 	.word	0x40003800
 8003e4c:	40003400 	.word	0x40003400

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e267      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d075      	beq.n	8003f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e6e:	4b88      	ldr	r3, [pc, #544]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d00c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4b85      	ldr	r3, [pc, #532]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d112      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4b82      	ldr	r3, [pc, #520]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e92:	d10b      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05b      	beq.n	8003f58 <HAL_RCC_OscConfig+0x108>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d157      	bne.n	8003f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e242      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x74>
 8003eb6:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a75      	ldr	r2, [pc, #468]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x98>
 8003ece:	4b70      	ldr	r3, [pc, #448]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a6f      	ldr	r2, [pc, #444]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b6d      	ldr	r3, [pc, #436]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6c      	ldr	r2, [pc, #432]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ee8:	4b69      	ldr	r3, [pc, #420]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a68      	ldr	r2, [pc, #416]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b66      	ldr	r3, [pc, #408]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a65      	ldr	r2, [pc, #404]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fd fb32 	bl	8001570 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fd fb2e 	bl	8001570 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e207      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b5b      	ldr	r3, [pc, #364]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0xc0>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd fb1e 	bl	8001570 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd fb1a 	bl	8001570 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e1f3      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	4b51      	ldr	r3, [pc, #324]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0xe8>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d063      	beq.n	800402e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f66:	4b4a      	ldr	r3, [pc, #296]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b44      	ldr	r3, [pc, #272]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	4b41      	ldr	r3, [pc, #260]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1c7      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4937      	ldr	r1, [pc, #220]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb6:	e03a      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc0:	4b34      	ldr	r3, [pc, #208]	; (8004094 <HAL_RCC_OscConfig+0x244>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fd fad3 	bl	8001570 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fd facf 	bl	8001570 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e1a8      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4925      	ldr	r1, [pc, #148]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCC_OscConfig+0x244>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd fab2 	bl	8001570 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004010:	f7fd faae 	bl	8001570 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e187      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d036      	beq.n	80040a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <HAL_RCC_OscConfig+0x248>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fd fa92 	bl	8001570 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004050:	f7fd fa8e 	bl	8001570 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e167      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8004064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x200>
 800406e:	e01b      	b.n	80040a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <HAL_RCC_OscConfig+0x248>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fd fa7b 	bl	8001570 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	e00e      	b.n	800409c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407e:	f7fd fa77 	bl	8001570 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d907      	bls.n	800409c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e150      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 8004090:	40023800 	.word	0x40023800
 8004094:	42470000 	.word	0x42470000
 8004098:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	4b88      	ldr	r3, [pc, #544]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ea      	bne.n	800407e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8097 	beq.w	80041e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ba:	4b81      	ldr	r3, [pc, #516]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	4b7d      	ldr	r3, [pc, #500]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	4a7c      	ldr	r2, [pc, #496]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d4:	6413      	str	r3, [r2, #64]	; 0x40
 80040d6:	4b7a      	ldr	r3, [pc, #488]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b77      	ldr	r3, [pc, #476]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d118      	bne.n	8004124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b74      	ldr	r3, [pc, #464]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a73      	ldr	r2, [pc, #460]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fd fa37 	bl	8001570 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fd fa33 	bl	8001570 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e10c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x2ea>
 800412c:	4b64      	ldr	r3, [pc, #400]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4a63      	ldr	r2, [pc, #396]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	; 0x70
 8004138:	e01c      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b05      	cmp	r3, #5
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x30c>
 8004142:	4b5f      	ldr	r3, [pc, #380]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004146:	4a5e      	ldr	r2, [pc, #376]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004148:	f043 0304 	orr.w	r3, r3, #4
 800414c:	6713      	str	r3, [r2, #112]	; 0x70
 800414e:	4b5c      	ldr	r3, [pc, #368]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	4a5b      	ldr	r2, [pc, #364]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6713      	str	r3, [r2, #112]	; 0x70
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800415c:	4b58      	ldr	r3, [pc, #352]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4a57      	ldr	r2, [pc, #348]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	6713      	str	r3, [r2, #112]	; 0x70
 8004168:	4b55      	ldr	r3, [pc, #340]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	4a54      	ldr	r2, [pc, #336]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416e:	f023 0304 	bic.w	r3, r3, #4
 8004172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fd f9f8 	bl	8001570 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fd f9f4 	bl	8001570 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0cb      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419a:	4b49      	ldr	r3, [pc, #292]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ee      	beq.n	8004184 <HAL_RCC_OscConfig+0x334>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a8:	f7fd f9e2 	bl	8001570 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b0:	f7fd f9de 	bl	8001570 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e0b5      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c6:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1ee      	bne.n	80041b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d105      	bne.n	80041e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d8:	4b39      	ldr	r3, [pc, #228]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	4a38      	ldr	r2, [pc, #224]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80a1 	beq.w	8004330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ee:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d05c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d141      	bne.n	8004286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fd f9b2 	bl	8001570 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004210:	f7fd f9ae 	bl	8001570 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e087      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	491b      	ldr	r1, [pc, #108]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <HAL_RCC_OscConfig+0x478>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fd f987 	bl	8001570 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004266:	f7fd f983 	bl	8001570 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e05c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x416>
 8004284:	e054      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fd f970 	bl	8001570 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd f96c 	bl	8001570 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e045      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x444>
 80042b2:	e03d      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e038      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40007000 	.word	0x40007000
 80042c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_RCC_OscConfig+0x4ec>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d028      	beq.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d121      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d11a      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004304:	4293      	cmp	r3, r2
 8004306:	d111      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	3b01      	subs	r3, #1
 8004316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d107      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800

08004340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0cc      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004354:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d90c      	bls.n	800437c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b8      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004394:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a58      	ldr	r2, [pc, #352]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800439e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ac:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a52      	ldr	r2, [pc, #328]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b50      	ldr	r3, [pc, #320]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	494d      	ldr	r1, [pc, #308]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d044      	beq.n	8004460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d119      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	4b3f      	ldr	r3, [pc, #252]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e06f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e067      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441e:	4b37      	ldr	r3, [pc, #220]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4934      	ldr	r1, [pc, #208]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004430:	f7fd f89e 	bl	8001570 <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	e00a      	b.n	800444e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fd f89a 	bl	8001570 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	; 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e04f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 020c 	and.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	429a      	cmp	r2, r3
 800445e:	d1eb      	bne.n	8004438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004460:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d20c      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e032      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b19      	ldr	r3, [pc, #100]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4916      	ldr	r1, [pc, #88]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490e      	ldr	r1, [pc, #56]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044c6:	f000 f821 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	490a      	ldr	r1, [pc, #40]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	5ccb      	ldrb	r3, [r1, r3]
 80044da:	fa22 f303 	lsr.w	r3, r2, r3
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc fffe 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023c00 	.word	0x40023c00
 80044fc:	40023800 	.word	0x40023800
 8004500:	080054bc 	.word	0x080054bc
 8004504:	20000004 	.word	0x20000004
 8004508:	20000008 	.word	0x20000008

0800450c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004510:	b090      	sub	sp, #64	; 0x40
 8004512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
 8004518:	2300      	movs	r3, #0
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451c:	2300      	movs	r3, #0
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004524:	4b59      	ldr	r3, [pc, #356]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b08      	cmp	r3, #8
 800452e:	d00d      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x40>
 8004530:	2b08      	cmp	r3, #8
 8004532:	f200 80a1 	bhi.w	8004678 <HAL_RCC_GetSysClockFreq+0x16c>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x34>
 800453a:	2b04      	cmp	r3, #4
 800453c:	d003      	beq.n	8004546 <HAL_RCC_GetSysClockFreq+0x3a>
 800453e:	e09b      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b53      	ldr	r3, [pc, #332]	; (8004690 <HAL_RCC_GetSysClockFreq+0x184>)
 8004542:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004544:	e09b      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004546:	4b53      	ldr	r3, [pc, #332]	; (8004694 <HAL_RCC_GetSysClockFreq+0x188>)
 8004548:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800454a:	e098      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800454c:	4b4f      	ldr	r3, [pc, #316]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004556:	4b4d      	ldr	r3, [pc, #308]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d028      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004562:	4b4a      	ldr	r3, [pc, #296]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	2200      	movs	r2, #0
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	627a      	str	r2, [r7, #36]	; 0x24
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004574:	2100      	movs	r1, #0
 8004576:	4b47      	ldr	r3, [pc, #284]	; (8004694 <HAL_RCC_GetSysClockFreq+0x188>)
 8004578:	fb03 f201 	mul.w	r2, r3, r1
 800457c:	2300      	movs	r3, #0
 800457e:	fb00 f303 	mul.w	r3, r0, r3
 8004582:	4413      	add	r3, r2
 8004584:	4a43      	ldr	r2, [pc, #268]	; (8004694 <HAL_RCC_GetSysClockFreq+0x188>)
 8004586:	fba0 1202 	umull	r1, r2, r0, r2
 800458a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800458c:	460a      	mov	r2, r1
 800458e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004592:	4413      	add	r3, r2
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	2200      	movs	r2, #0
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	61fa      	str	r2, [r7, #28]
 800459e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045a6:	f7fb fe0f 	bl	80001c8 <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4613      	mov	r3, r2
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b2:	e053      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b4:	4b35      	ldr	r3, [pc, #212]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	2200      	movs	r2, #0
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	617a      	str	r2, [r7, #20]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045c6:	f04f 0b00 	mov.w	fp, #0
 80045ca:	4652      	mov	r2, sl
 80045cc:	465b      	mov	r3, fp
 80045ce:	f04f 0000 	mov.w	r0, #0
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	0159      	lsls	r1, r3, #5
 80045d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045dc:	0150      	lsls	r0, r2, #5
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	ebb2 080a 	subs.w	r8, r2, sl
 80045e6:	eb63 090b 	sbc.w	r9, r3, fp
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004602:	eb63 0509 	sbc.w	r5, r3, r9
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	00eb      	lsls	r3, r5, #3
 8004610:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004614:	00e2      	lsls	r2, r4, #3
 8004616:	4614      	mov	r4, r2
 8004618:	461d      	mov	r5, r3
 800461a:	eb14 030a 	adds.w	r3, r4, sl
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	eb45 030b 	adc.w	r3, r5, fp
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004632:	4629      	mov	r1, r5
 8004634:	028b      	lsls	r3, r1, #10
 8004636:	4621      	mov	r1, r4
 8004638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800463c:	4621      	mov	r1, r4
 800463e:	028a      	lsls	r2, r1, #10
 8004640:	4610      	mov	r0, r2
 8004642:	4619      	mov	r1, r3
 8004644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004646:	2200      	movs	r2, #0
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	60fa      	str	r2, [r7, #12]
 800464c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004650:	f7fb fdba 	bl	80001c8 <__aeabi_uldivmod>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4613      	mov	r3, r2
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	3301      	adds	r3, #1
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800466c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004676:	e002      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCC_GetSysClockFreq+0x184>)
 800467a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800467c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004680:	4618      	mov	r0, r3
 8004682:	3740      	adds	r7, #64	; 0x40
 8004684:	46bd      	mov	sp, r7
 8004686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800468a:	bf00      	nop
 800468c:	40023800 	.word	0x40023800
 8004690:	00f42400 	.word	0x00f42400
 8004694:	018cba80 	.word	0x018cba80

08004698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <HAL_RCC_GetHCLKFreq+0x14>)
 800469e:	681b      	ldr	r3, [r3, #0]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000004 	.word	0x20000004

080046b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046b4:	f7ff fff0 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	0a9b      	lsrs	r3, r3, #10
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	4903      	ldr	r1, [pc, #12]	; (80046d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40023800 	.word	0x40023800
 80046d4:	080054cc 	.word	0x080054cc

080046d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046dc:	f7ff ffdc 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	0b5b      	lsrs	r3, r3, #13
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	; (80046fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	080054cc 	.word	0x080054cc

08004700 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d105      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004724:	2b00      	cmp	r3, #0
 8004726:	d035      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004728:	4b62      	ldr	r3, [pc, #392]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800472e:	f7fc ff1f 	bl	8001570 <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004736:	f7fc ff1b 	bl	8001570 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0b0      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004748:	4b5b      	ldr	r3, [pc, #364]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	019a      	lsls	r2, r3, #6
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	071b      	lsls	r3, r3, #28
 8004760:	4955      	ldr	r1, [pc, #340]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004768:	4b52      	ldr	r3, [pc, #328]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800476e:	f7fc feff 	bl	8001570 <HAL_GetTick>
 8004772:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004776:	f7fc fefb 	bl	8001570 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e090      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004788:	4b4b      	ldr	r3, [pc, #300]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8083 	beq.w	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	4a43      	ldr	r2, [pc, #268]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6413      	str	r3, [r2, #64]	; 0x40
 80047b2:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047be:	4b3f      	ldr	r3, [pc, #252]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a3e      	ldr	r2, [pc, #248]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047ca:	f7fc fed1 	bl	8001570 <HAL_GetTick>
 80047ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047d2:	f7fc fecd 	bl	8001570 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e062      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047e4:	4b35      	ldr	r3, [pc, #212]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047f0:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d02f      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	429a      	cmp	r2, r3
 800480c:	d028      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800480e:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004816:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004818:	4b29      	ldr	r3, [pc, #164]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800481e:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004824:	4a24      	ldr	r2, [pc, #144]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b01      	cmp	r3, #1
 8004834:	d114      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004836:	f7fc fe9b 	bl	8001570 <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483c:	e00a      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fc fe97 	bl	8001570 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e02a      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004854:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ee      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800486c:	d10d      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800487e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004882:	490d      	ldr	r1, [pc, #52]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]
 8004888:	e005      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004890:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004894:	6093      	str	r3, [r2, #8]
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004898:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a2:	4905      	ldr	r1, [pc, #20]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	42470068 	.word	0x42470068
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40007000 	.word	0x40007000
 80048c0:	42470e40 	.word	0x42470e40

080048c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d13e      	bne.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048e2:	4b23      	ldr	r3, [pc, #140]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d12f      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048f8:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048fa:	617b      	str	r3, [r7, #20]
          break;
 80048fc:	e02f      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048fe:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490a:	d108      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800490c:	4b18      	ldr	r3, [pc, #96]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004914:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004916:	fbb2 f3f3 	udiv	r3, r2, r3
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e007      	b.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800491e:	4b14      	ldr	r3, [pc, #80]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004926:	4a15      	ldr	r2, [pc, #84]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800492e:	4b10      	ldr	r3, [pc, #64]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004934:	099b      	lsrs	r3, r3, #6
 8004936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	fb02 f303 	mul.w	r3, r2, r3
 8004940:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004948:	0f1b      	lsrs	r3, r3, #28
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
          break;
 8004956:	e002      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
          break;
 800495c:	bf00      	nop
        }
      }
      break;
 800495e:	bf00      	nop
    }
  }
  return frequency;
 8004960:	697b      	ldr	r3, [r7, #20]
}
 8004962:	4618      	mov	r0, r3
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40023800 	.word	0x40023800
 8004974:	00bb8000 	.word	0x00bb8000
 8004978:	018cba80 	.word	0x018cba80
 800497c:	00f42400 	.word	0x00f42400

08004980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e041      	b.n	8004a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fc fc9c 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f000 f9ce 	bl	8004d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d001      	beq.n	8004a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e04e      	b.n	8004ad6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a23      	ldr	r2, [pc, #140]	; (8004ae4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d022      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a62:	d01d      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1e      	ldr	r2, [pc, #120]	; (8004aec <HAL_TIM_Base_Start_IT+0xcc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a18      	ldr	r2, [pc, #96]	; (8004afc <HAL_TIM_Base_Start_IT+0xdc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d111      	bne.n	8004ac4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d010      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	e007      	b.n	8004ad4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40000400 	.word	0x40000400
 8004aec:	40000800 	.word	0x40000800
 8004af0:	40000c00 	.word	0x40000c00
 8004af4:	40010400 	.word	0x40010400
 8004af8:	40014000 	.word	0x40014000
 8004afc:	40001800 	.word	0x40001800

08004b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d122      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d11b      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0202 	mvn.w	r2, #2
 8004b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8ee 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8e0 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f8f1 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d122      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d11b      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0204 	mvn.w	r2, #4
 8004b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f8c4 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 8004b9c:	e005      	b.n	8004baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f8b6 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f8c7 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d122      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d11b      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0208 	mvn.w	r2, #8
 8004bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f89a 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f88c 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f89d 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d122      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0210 	mvn.w	r2, #16
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f870 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f862 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f873 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d10e      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d107      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0201 	mvn.w	r2, #1
 8004c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc f984 	bl	8000f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d10e      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9c:	2b80      	cmp	r3, #128	; 0x80
 8004c9e:	d107      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f902 	bl	8004eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d10e      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d107      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f838 	bl	8004d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d10e      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d107      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0220 	mvn.w	r2, #32
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f8cc 	bl	8004ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a40      	ldr	r2, [pc, #256]	; (8004e74 <TIM_Base_SetConfig+0x114>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d013      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d00f      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a3d      	ldr	r2, [pc, #244]	; (8004e78 <TIM_Base_SetConfig+0x118>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a3c      	ldr	r2, [pc, #240]	; (8004e7c <TIM_Base_SetConfig+0x11c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d007      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a3b      	ldr	r2, [pc, #236]	; (8004e80 <TIM_Base_SetConfig+0x120>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a3a      	ldr	r2, [pc, #232]	; (8004e84 <TIM_Base_SetConfig+0x124>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d108      	bne.n	8004db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2f      	ldr	r2, [pc, #188]	; (8004e74 <TIM_Base_SetConfig+0x114>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d02b      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc0:	d027      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <TIM_Base_SetConfig+0x118>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d023      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a2b      	ldr	r2, [pc, #172]	; (8004e7c <TIM_Base_SetConfig+0x11c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01f      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <TIM_Base_SetConfig+0x120>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01b      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a29      	ldr	r2, [pc, #164]	; (8004e84 <TIM_Base_SetConfig+0x124>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d017      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a28      	ldr	r2, [pc, #160]	; (8004e88 <TIM_Base_SetConfig+0x128>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <TIM_Base_SetConfig+0x12c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00f      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <TIM_Base_SetConfig+0x130>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00b      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <TIM_Base_SetConfig+0x134>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d007      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a24      	ldr	r2, [pc, #144]	; (8004e98 <TIM_Base_SetConfig+0x138>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a23      	ldr	r2, [pc, #140]	; (8004e9c <TIM_Base_SetConfig+0x13c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d108      	bne.n	8004e24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <TIM_Base_SetConfig+0x114>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_Base_SetConfig+0xf8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a0c      	ldr	r2, [pc, #48]	; (8004e84 <TIM_Base_SetConfig+0x124>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d103      	bne.n	8004e60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	615a      	str	r2, [r3, #20]
}
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40010400 	.word	0x40010400
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40014400 	.word	0x40014400
 8004e90:	40014800 	.word	0x40014800
 8004e94:	40001800 	.word	0x40001800
 8004e98:	40001c00 	.word	0x40001c00
 8004e9c:	40002000 	.word	0x40002000

08004ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e03f      	b.n	8004f5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fc fa20 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2224      	movs	r2, #36	; 0x24
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f829 	bl	8004f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f68:	b0c0      	sub	sp, #256	; 0x100
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f80:	68d9      	ldr	r1, [r3, #12]
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	ea40 0301 	orr.w	r3, r0, r1
 8004f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fbc:	f021 010c 	bic.w	r1, r1, #12
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fde:	6999      	ldr	r1, [r3, #24]
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	ea40 0301 	orr.w	r3, r0, r1
 8004fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	4b8f      	ldr	r3, [pc, #572]	; (8005230 <UART_SetConfig+0x2cc>)
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d005      	beq.n	8005004 <UART_SetConfig+0xa0>
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b8d      	ldr	r3, [pc, #564]	; (8005234 <UART_SetConfig+0x2d0>)
 8005000:	429a      	cmp	r2, r3
 8005002:	d104      	bne.n	800500e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005004:	f7ff fb68 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 8005008:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800500c:	e003      	b.n	8005016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800500e:	f7ff fb4f 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8005012:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005020:	f040 810c 	bne.w	800523c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005028:	2200      	movs	r2, #0
 800502a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800502e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005036:	4622      	mov	r2, r4
 8005038:	462b      	mov	r3, r5
 800503a:	1891      	adds	r1, r2, r2
 800503c:	65b9      	str	r1, [r7, #88]	; 0x58
 800503e:	415b      	adcs	r3, r3
 8005040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005046:	4621      	mov	r1, r4
 8005048:	eb12 0801 	adds.w	r8, r2, r1
 800504c:	4629      	mov	r1, r5
 800504e:	eb43 0901 	adc.w	r9, r3, r1
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800505e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005066:	4690      	mov	r8, r2
 8005068:	4699      	mov	r9, r3
 800506a:	4623      	mov	r3, r4
 800506c:	eb18 0303 	adds.w	r3, r8, r3
 8005070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005074:	462b      	mov	r3, r5
 8005076:	eb49 0303 	adc.w	r3, r9, r3
 800507a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800508a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800508e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005092:	460b      	mov	r3, r1
 8005094:	18db      	adds	r3, r3, r3
 8005096:	653b      	str	r3, [r7, #80]	; 0x50
 8005098:	4613      	mov	r3, r2
 800509a:	eb42 0303 	adc.w	r3, r2, r3
 800509e:	657b      	str	r3, [r7, #84]	; 0x54
 80050a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050a8:	f7fb f88e 	bl	80001c8 <__aeabi_uldivmod>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4b61      	ldr	r3, [pc, #388]	; (8005238 <UART_SetConfig+0x2d4>)
 80050b2:	fba3 2302 	umull	r2, r3, r3, r2
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	011c      	lsls	r4, r3, #4
 80050ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050cc:	4642      	mov	r2, r8
 80050ce:	464b      	mov	r3, r9
 80050d0:	1891      	adds	r1, r2, r2
 80050d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80050d4:	415b      	adcs	r3, r3
 80050d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050dc:	4641      	mov	r1, r8
 80050de:	eb12 0a01 	adds.w	sl, r2, r1
 80050e2:	4649      	mov	r1, r9
 80050e4:	eb43 0b01 	adc.w	fp, r3, r1
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050fc:	4692      	mov	sl, r2
 80050fe:	469b      	mov	fp, r3
 8005100:	4643      	mov	r3, r8
 8005102:	eb1a 0303 	adds.w	r3, sl, r3
 8005106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800510a:	464b      	mov	r3, r9
 800510c:	eb4b 0303 	adc.w	r3, fp, r3
 8005110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005120:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005128:	460b      	mov	r3, r1
 800512a:	18db      	adds	r3, r3, r3
 800512c:	643b      	str	r3, [r7, #64]	; 0x40
 800512e:	4613      	mov	r3, r2
 8005130:	eb42 0303 	adc.w	r3, r2, r3
 8005134:	647b      	str	r3, [r7, #68]	; 0x44
 8005136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800513a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800513e:	f7fb f843 	bl	80001c8 <__aeabi_uldivmod>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4611      	mov	r1, r2
 8005148:	4b3b      	ldr	r3, [pc, #236]	; (8005238 <UART_SetConfig+0x2d4>)
 800514a:	fba3 2301 	umull	r2, r3, r3, r1
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2264      	movs	r2, #100	; 0x64
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	1acb      	subs	r3, r1, r3
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800515e:	4b36      	ldr	r3, [pc, #216]	; (8005238 <UART_SetConfig+0x2d4>)
 8005160:	fba3 2302 	umull	r2, r3, r3, r2
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800516c:	441c      	add	r4, r3
 800516e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005172:	2200      	movs	r2, #0
 8005174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005178:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800517c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005180:	4642      	mov	r2, r8
 8005182:	464b      	mov	r3, r9
 8005184:	1891      	adds	r1, r2, r2
 8005186:	63b9      	str	r1, [r7, #56]	; 0x38
 8005188:	415b      	adcs	r3, r3
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005190:	4641      	mov	r1, r8
 8005192:	1851      	adds	r1, r2, r1
 8005194:	6339      	str	r1, [r7, #48]	; 0x30
 8005196:	4649      	mov	r1, r9
 8005198:	414b      	adcs	r3, r1
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051a8:	4659      	mov	r1, fp
 80051aa:	00cb      	lsls	r3, r1, #3
 80051ac:	4651      	mov	r1, sl
 80051ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051b2:	4651      	mov	r1, sl
 80051b4:	00ca      	lsls	r2, r1, #3
 80051b6:	4610      	mov	r0, r2
 80051b8:	4619      	mov	r1, r3
 80051ba:	4603      	mov	r3, r0
 80051bc:	4642      	mov	r2, r8
 80051be:	189b      	adds	r3, r3, r2
 80051c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051c4:	464b      	mov	r3, r9
 80051c6:	460a      	mov	r2, r1
 80051c8:	eb42 0303 	adc.w	r3, r2, r3
 80051cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051e4:	460b      	mov	r3, r1
 80051e6:	18db      	adds	r3, r3, r3
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ea:	4613      	mov	r3, r2
 80051ec:	eb42 0303 	adc.w	r3, r2, r3
 80051f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051fa:	f7fa ffe5 	bl	80001c8 <__aeabi_uldivmod>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <UART_SetConfig+0x2d4>)
 8005204:	fba3 1302 	umull	r1, r3, r3, r2
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	2164      	movs	r1, #100	; 0x64
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	3332      	adds	r3, #50	; 0x32
 8005216:	4a08      	ldr	r2, [pc, #32]	; (8005238 <UART_SetConfig+0x2d4>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	f003 0207 	and.w	r2, r3, #7
 8005222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4422      	add	r2, r4
 800522a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800522c:	e106      	b.n	800543c <UART_SetConfig+0x4d8>
 800522e:	bf00      	nop
 8005230:	40011000 	.word	0x40011000
 8005234:	40011400 	.word	0x40011400
 8005238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800523c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005240:	2200      	movs	r2, #0
 8005242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005246:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800524a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800524e:	4642      	mov	r2, r8
 8005250:	464b      	mov	r3, r9
 8005252:	1891      	adds	r1, r2, r2
 8005254:	6239      	str	r1, [r7, #32]
 8005256:	415b      	adcs	r3, r3
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
 800525a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800525e:	4641      	mov	r1, r8
 8005260:	1854      	adds	r4, r2, r1
 8005262:	4649      	mov	r1, r9
 8005264:	eb43 0501 	adc.w	r5, r3, r1
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	00eb      	lsls	r3, r5, #3
 8005272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005276:	00e2      	lsls	r2, r4, #3
 8005278:	4614      	mov	r4, r2
 800527a:	461d      	mov	r5, r3
 800527c:	4643      	mov	r3, r8
 800527e:	18e3      	adds	r3, r4, r3
 8005280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005284:	464b      	mov	r3, r9
 8005286:	eb45 0303 	adc.w	r3, r5, r3
 800528a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800529a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052aa:	4629      	mov	r1, r5
 80052ac:	008b      	lsls	r3, r1, #2
 80052ae:	4621      	mov	r1, r4
 80052b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b4:	4621      	mov	r1, r4
 80052b6:	008a      	lsls	r2, r1, #2
 80052b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052bc:	f7fa ff84 	bl	80001c8 <__aeabi_uldivmod>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4b60      	ldr	r3, [pc, #384]	; (8005448 <UART_SetConfig+0x4e4>)
 80052c6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	011c      	lsls	r4, r3, #4
 80052ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052e0:	4642      	mov	r2, r8
 80052e2:	464b      	mov	r3, r9
 80052e4:	1891      	adds	r1, r2, r2
 80052e6:	61b9      	str	r1, [r7, #24]
 80052e8:	415b      	adcs	r3, r3
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f0:	4641      	mov	r1, r8
 80052f2:	1851      	adds	r1, r2, r1
 80052f4:	6139      	str	r1, [r7, #16]
 80052f6:	4649      	mov	r1, r9
 80052f8:	414b      	adcs	r3, r1
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005308:	4659      	mov	r1, fp
 800530a:	00cb      	lsls	r3, r1, #3
 800530c:	4651      	mov	r1, sl
 800530e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005312:	4651      	mov	r1, sl
 8005314:	00ca      	lsls	r2, r1, #3
 8005316:	4610      	mov	r0, r2
 8005318:	4619      	mov	r1, r3
 800531a:	4603      	mov	r3, r0
 800531c:	4642      	mov	r2, r8
 800531e:	189b      	adds	r3, r3, r2
 8005320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005324:	464b      	mov	r3, r9
 8005326:	460a      	mov	r2, r1
 8005328:	eb42 0303 	adc.w	r3, r2, r3
 800532c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	67bb      	str	r3, [r7, #120]	; 0x78
 800533a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005348:	4649      	mov	r1, r9
 800534a:	008b      	lsls	r3, r1, #2
 800534c:	4641      	mov	r1, r8
 800534e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005352:	4641      	mov	r1, r8
 8005354:	008a      	lsls	r2, r1, #2
 8005356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800535a:	f7fa ff35 	bl	80001c8 <__aeabi_uldivmod>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4611      	mov	r1, r2
 8005364:	4b38      	ldr	r3, [pc, #224]	; (8005448 <UART_SetConfig+0x4e4>)
 8005366:	fba3 2301 	umull	r2, r3, r3, r1
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	2264      	movs	r2, #100	; 0x64
 800536e:	fb02 f303 	mul.w	r3, r2, r3
 8005372:	1acb      	subs	r3, r1, r3
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	3332      	adds	r3, #50	; 0x32
 8005378:	4a33      	ldr	r2, [pc, #204]	; (8005448 <UART_SetConfig+0x4e4>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005384:	441c      	add	r4, r3
 8005386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538a:	2200      	movs	r2, #0
 800538c:	673b      	str	r3, [r7, #112]	; 0x70
 800538e:	677a      	str	r2, [r7, #116]	; 0x74
 8005390:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005394:	4642      	mov	r2, r8
 8005396:	464b      	mov	r3, r9
 8005398:	1891      	adds	r1, r2, r2
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	415b      	adcs	r3, r3
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053a4:	4641      	mov	r1, r8
 80053a6:	1851      	adds	r1, r2, r1
 80053a8:	6039      	str	r1, [r7, #0]
 80053aa:	4649      	mov	r1, r9
 80053ac:	414b      	adcs	r3, r1
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053bc:	4659      	mov	r1, fp
 80053be:	00cb      	lsls	r3, r1, #3
 80053c0:	4651      	mov	r1, sl
 80053c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c6:	4651      	mov	r1, sl
 80053c8:	00ca      	lsls	r2, r1, #3
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	4642      	mov	r2, r8
 80053d2:	189b      	adds	r3, r3, r2
 80053d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d6:	464b      	mov	r3, r9
 80053d8:	460a      	mov	r2, r1
 80053da:	eb42 0303 	adc.w	r3, r2, r3
 80053de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ea:	667a      	str	r2, [r7, #100]	; 0x64
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053f8:	4649      	mov	r1, r9
 80053fa:	008b      	lsls	r3, r1, #2
 80053fc:	4641      	mov	r1, r8
 80053fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005402:	4641      	mov	r1, r8
 8005404:	008a      	lsls	r2, r1, #2
 8005406:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800540a:	f7fa fedd 	bl	80001c8 <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <UART_SetConfig+0x4e4>)
 8005414:	fba3 1302 	umull	r1, r3, r3, r2
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	2164      	movs	r1, #100	; 0x64
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	3332      	adds	r3, #50	; 0x32
 8005426:	4a08      	ldr	r2, [pc, #32]	; (8005448 <UART_SetConfig+0x4e4>)
 8005428:	fba2 2303 	umull	r2, r3, r2, r3
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	f003 020f 	and.w	r2, r3, #15
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4422      	add	r2, r4
 800543a:	609a      	str	r2, [r3, #8]
}
 800543c:	bf00      	nop
 800543e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005442:	46bd      	mov	sp, r7
 8005444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005448:	51eb851f 	.word	0x51eb851f

0800544c <memset>:
 800544c:	4402      	add	r2, r0
 800544e:	4603      	mov	r3, r0
 8005450:	4293      	cmp	r3, r2
 8005452:	d100      	bne.n	8005456 <memset+0xa>
 8005454:	4770      	bx	lr
 8005456:	f803 1b01 	strb.w	r1, [r3], #1
 800545a:	e7f9      	b.n	8005450 <memset+0x4>

0800545c <__libc_init_array>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	4d0d      	ldr	r5, [pc, #52]	; (8005494 <__libc_init_array+0x38>)
 8005460:	4c0d      	ldr	r4, [pc, #52]	; (8005498 <__libc_init_array+0x3c>)
 8005462:	1b64      	subs	r4, r4, r5
 8005464:	10a4      	asrs	r4, r4, #2
 8005466:	2600      	movs	r6, #0
 8005468:	42a6      	cmp	r6, r4
 800546a:	d109      	bne.n	8005480 <__libc_init_array+0x24>
 800546c:	4d0b      	ldr	r5, [pc, #44]	; (800549c <__libc_init_array+0x40>)
 800546e:	4c0c      	ldr	r4, [pc, #48]	; (80054a0 <__libc_init_array+0x44>)
 8005470:	f000 f818 	bl	80054a4 <_init>
 8005474:	1b64      	subs	r4, r4, r5
 8005476:	10a4      	asrs	r4, r4, #2
 8005478:	2600      	movs	r6, #0
 800547a:	42a6      	cmp	r6, r4
 800547c:	d105      	bne.n	800548a <__libc_init_array+0x2e>
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	f855 3b04 	ldr.w	r3, [r5], #4
 8005484:	4798      	blx	r3
 8005486:	3601      	adds	r6, #1
 8005488:	e7ee      	b.n	8005468 <__libc_init_array+0xc>
 800548a:	f855 3b04 	ldr.w	r3, [r5], #4
 800548e:	4798      	blx	r3
 8005490:	3601      	adds	r6, #1
 8005492:	e7f2      	b.n	800547a <__libc_init_array+0x1e>
 8005494:	080054dc 	.word	0x080054dc
 8005498:	080054dc 	.word	0x080054dc
 800549c:	080054dc 	.word	0x080054dc
 80054a0:	080054e0 	.word	0x080054e0

080054a4 <_init>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr

080054b0 <_fini>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr
