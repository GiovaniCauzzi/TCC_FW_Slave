
Firmware_TCC_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005608  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b0  080057b0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057b8  080057b8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080057c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000006a0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006b4  200006b4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   000145d8  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bf0  00000000  00000000  0003465f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001368  00000000  00000000  00037250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f50  00000000  00000000  000385b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000037c2  00000000  00000000  00039508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001888d  00000000  00000000  0003ccca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d30c0  00000000  00000000  00055557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005368  00000000  00000000  00128618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0012d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005778 	.word	0x08005778

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005778 	.word	0x08005778

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  I2S_inBufferPtr  = &I2S_inputData[0];
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  I2S_outputBufferPtr = &I2S_outputData[0];
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 80004d4:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 80004d6:	601a      	str	r2, [r3, #0]
  I2S_flagDataReady = 1;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000694 	.word	0x20000694
 80004f0:	20000394 	.word	0x20000394
 80004f4:	20000000 	.word	0x20000000
 80004f8:	20000494 	.word	0x20000494
 80004fc:	2000069c 	.word	0x2000069c

08000500 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  I2S_inBufferPtr  = &I2S_inputData[dBUFFER_I2S_SIZE / 2];
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  I2S_outputBufferPtr = &I2S_outputData[dBUFFER_I2S_SIZE / 2];
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000512:	601a      	str	r2, [r3, #0]
  I2S_flagDataReady = 1;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000694 	.word	0x20000694
 800052c:	20000414 	.word	0x20000414
 8000530:	20000000 	.word	0x20000000
 8000534:	20000514 	.word	0x20000514
 8000538:	2000069c 	.word	0x2000069c

0800053c <HAL_ADC_ConvHalfCpltCallback>:
      I2S_inputData[i] = 0;
  }
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	*ADC_inBufferPtr = &adc_buf[0];
 8000544:	4a08      	ldr	r2, [pc, #32]	; (8000568 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	b212      	sxth	r2, r2
 800054c:	801a      	strh	r2, [r3, #0]
  DAC_outputBufferPtr = &dac_buf[0];
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000550:	4a08      	ldr	r2, [pc, #32]	; (8000574 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000552:	601a      	str	r2, [r3, #0]
  ADC_flagDataReady = 1;
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000556:	2201      	movs	r2, #1
 8000558:	701a      	strb	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000594 	.word	0x20000594
 800056c:	20000698 	.word	0x20000698
 8000570:	20000004 	.word	0x20000004
 8000574:	20000614 	.word	0x20000614
 8000578:	2000069d 	.word	0x2000069d

0800057c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	*ADC_inBufferPtr = &adc_buf[dBUFFER_ADC_SIZE / 2];
 8000584:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_ADC_ConvCpltCallback+0x30>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	b212      	sxth	r2, r2
 800058c:	801a      	strh	r2, [r3, #0]
  DAC_outputBufferPtr = &dac_buf[dBUFFER_ADC_SIZE / 2];
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_ADC_ConvCpltCallback+0x34>)
 8000590:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <HAL_ADC_ConvCpltCallback+0x38>)
 8000592:	601a      	str	r2, [r3, #0]
  ADC_flagDataReady = 1;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200005d4 	.word	0x200005d4
 80005ac:	20000698 	.word	0x20000698
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000654 	.word	0x20000654
 80005b8:	2000069d 	.word	0x2000069d

080005bc <I2S_processData>:
        buffer[i] = amplitude * sin(2 * M_PI * FREQUENCY * t);
    }
}

void I2S_processData()
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
	for(uint16_t n = 0; n < dBUFFER_ADC_SIZE; n++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	80fb      	strh	r3, [r7, #6]
 80005c6:	e00c      	b.n	80005e2 <I2S_processData+0x26>
	{
		dac_buf[n] = I2S_inputData[n*2];
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <I2S_processData+0x40>)
 80005ce:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	b291      	uxth	r1, r2
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <I2S_processData+0x44>)
 80005d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t n = 0; n < dBUFFER_ADC_SIZE; n++)
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	3301      	adds	r3, #1
 80005e0:	80fb      	strh	r3, [r7, #6]
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	2b3f      	cmp	r3, #63	; 0x3f
 80005e6:	d9ef      	bls.n	80005c8 <I2S_processData+0xc>
		//dac_buf[n] = 2048;
	}

  I2S_flagDataReady = 0;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <I2S_processData+0x48>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000394 	.word	0x20000394
 8000600:	20000614 	.word	0x20000614
 8000604:	2000069c 	.word	0x2000069c

08000608 <ADC_processData>:

void ADC_processData()
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
  for (uint16_t n = 0 ; n < dBUFFER_ADC_SIZE ; n++)
 800060e:	2300      	movs	r3, #0
 8000610:	80fb      	strh	r3, [r7, #6]
 8000612:	e00c      	b.n	800062e <ADC_processData+0x26>
  {
      I2S_outputData[n*2] = adc_buf[n];
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <ADC_processData+0x40>)
 8000618:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	b211      	sxth	r1, r2
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <ADC_processData+0x44>)
 8000624:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint16_t n = 0 ; n < dBUFFER_ADC_SIZE ; n++)
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	3301      	adds	r3, #1
 800062c:	80fb      	strh	r3, [r7, #6]
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	2b3f      	cmp	r3, #63	; 0x3f
 8000632:	d9ef      	bls.n	8000614 <ADC_processData+0xc>
  }
  ADC_flagDataReady = 0;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <ADC_processData+0x48>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000594 	.word	0x20000594
 800064c:	20000494 	.word	0x20000494
 8000650:	2000069d 	.word	0x2000069d

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint16_t blinkTimer = 250; //1ms steps
 800065a:	23fa      	movs	r3, #250	; 0xfa
 800065c:	80fb      	strh	r3, [r7, #6]
  uint16_t blinkCount = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f000 feb9 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f86d 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 fa8d 	bl	8000b88 <MX_GPIO_Init>
  MX_DMA_Init();
 800066e:	f000 fa45 	bl	8000afc <MX_DMA_Init>
  MX_I2C2_Init();
 8000672:	f000 f94d 	bl	8000910 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000676:	f000 f979 	bl	800096c <MX_I2S2_Init>
  MX_ADC1_Init();
 800067a:	f000 f8cd 	bl	8000818 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800067e:	f000 fa13 	bl	8000aa8 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000682:	f000 f9ed 	bl	8000a60 <MX_TIM14_Init>
  MX_DAC_Init();
 8000686:	f000 f919 	bl	80008bc <MX_DAC_Init>
  MX_TIM2_Init();
 800068a:	f000 f99d 	bl	80009c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //codec_init(&hi2c2);
  //codec_init_teste(&hi2c2);
  HAL_TIM_Base_Start_IT(&htim14);
 800068e:	4820      	ldr	r0, [pc, #128]	; (8000710 <main+0xbc>)
 8000690:	f004 f952 	bl	8004938 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000694:	481f      	ldr	r0, [pc, #124]	; (8000714 <main+0xc0>)
 8000696:	f004 f94f 	bl	8004938 <HAL_TIM_Base_Start_IT>

  HAL_StatusTypeDef status = HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t *)I2S_outputData, (uint16_t *)I2S_inputData, dBUFFER_I2S_SIZE);
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <main+0xc4>)
 800069e:	491f      	ldr	r1, [pc, #124]	; (800071c <main+0xc8>)
 80006a0:	481f      	ldr	r0, [pc, #124]	; (8000720 <main+0xcc>)
 80006a2:	f002 fecd 	bl	8003440 <HAL_I2SEx_TransmitReceive_DMA>
 80006a6:	4603      	mov	r3, r0
 80006a8:	70fb      	strb	r3, [r7, #3]
  status = HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, dBUFFER_ADC_SIZE);
 80006aa:	2240      	movs	r2, #64	; 0x40
 80006ac:	491d      	ldr	r1, [pc, #116]	; (8000724 <main+0xd0>)
 80006ae:	481e      	ldr	r0, [pc, #120]	; (8000728 <main+0xd4>)
 80006b0:	f000 ff48 	bl	8001544 <HAL_ADC_Start_DMA>
 80006b4:	4603      	mov	r3, r0
 80006b6:	70fb      	strb	r3, [r7, #3]
  status = HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2,  (uint32_t*)dac_buf, dBUFFER_ADC_SIZE, DAC_ALIGN_12B_R);
 80006b8:	2300      	movs	r3, #0
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	4a1b      	ldr	r2, [pc, #108]	; (800072c <main+0xd8>)
 80006c0:	2110      	movs	r1, #16
 80006c2:	481b      	ldr	r0, [pc, #108]	; (8000730 <main+0xdc>)
 80006c4:	f001 fc2c 	bl	8001f20 <HAL_DAC_Start_DMA>
 80006c8:	4603      	mov	r3, r0
 80006ca:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (I2S_flagDataReady)
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <main+0xe0>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d003      	beq.n	80006dc <main+0x88>
    {
      I2S_processData();
 80006d4:	f7ff ff72 	bl	80005bc <I2S_processData>
      blinkTimer = 50;
 80006d8:	2332      	movs	r3, #50	; 0x32
 80006da:	80fb      	strh	r3, [r7, #6]
    }

    if(ADC_flagDataReady)
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <main+0xe4>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <main+0x94>
    {
      ADC_processData();
 80006e4:	f7ff ff90 	bl	8000608 <ADC_processData>
    }

    if (GL_timer_1ms)
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <main+0xe8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0ed      	beq.n	80006cc <main+0x78>
    {
      GL_timer_1ms = 0;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <main+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]

      if(blinkCount++ >= blinkTimer)
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	80ba      	strh	r2, [r7, #4]
 80006fc:	88fa      	ldrh	r2, [r7, #6]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d8e4      	bhi.n	80006cc <main+0x78>
      {
        blinkCount = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	80bb      	strh	r3, [r7, #4]
        HAL_GPIO_TogglePin(STAT_LED_INT_GPIO_Port, STAT_LED_INT_Pin);
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <main+0xec>)
 800070a:	f002 faf4 	bl	8002cf6 <HAL_GPIO_TogglePin>
    if (I2S_flagDataReady)
 800070e:	e7dd      	b.n	80006cc <main+0x78>
 8000710:	20000308 	.word	0x20000308
 8000714:	200002c0 	.word	0x200002c0
 8000718:	20000394 	.word	0x20000394
 800071c:	20000494 	.word	0x20000494
 8000720:	200001b8 	.word	0x200001b8
 8000724:	20000594 	.word	0x20000594
 8000728:	20000048 	.word	0x20000048
 800072c:	20000614 	.word	0x20000614
 8000730:	200000f0 	.word	0x200000f0
 8000734:	2000069c 	.word	0x2000069c
 8000738:	2000069d 	.word	0x2000069d
 800073c:	20000034 	.word	0x20000034
 8000740:	40020400 	.word	0x40020400

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f004 ffe4 	bl	8005720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <SystemClock_Config+0xcc>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xd0>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 80007b4:	230d      	movs	r3, #13
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007b8:	23a8      	movs	r3, #168	; 0xa8
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c0:	2304      	movs	r3, #4
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 facd 	bl	8003d68 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007d4:	f000 faa4 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2302      	movs	r3, #2
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2105      	movs	r1, #5
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fd2e 	bl	8004258 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000802:	f000 fa8d 	bl	8000d20 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800082c:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <MX_ADC1_Init+0xa0>)
 800082e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000832:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000836:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000846:	2201      	movs	r2, #1
 8000848:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800085c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800086a:	2201      	movs	r2, #1
 800086c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000870:	2201      	movs	r2, #1
 8000872:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000878:	2201      	movs	r2, #1
 800087a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800087e:	f000 fe1d 	bl	80014bc <HAL_ADC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000888:	f000 fa4a 	bl	8000d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800088c:	2300      	movs	r3, #0
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800089e:	f000 ff6b 	bl	8001778 <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008a8:	f000 fa3a 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000048 	.word	0x20000048
 80008b8:	40012000 	.word	0x40012000

080008bc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_DAC_Init+0x4c>)
 80008cc:	4a0f      	ldr	r2, [pc, #60]	; (800090c <MX_DAC_Init+0x50>)
 80008ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_DAC_Init+0x4c>)
 80008d2:	f001 fb02 	bl	8001eda <HAL_DAC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008dc:	f000 fa20 	bl	8000d20 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80008e0:	2324      	movs	r3, #36	; 0x24
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	2210      	movs	r2, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_DAC_Init+0x4c>)
 80008f0:	f001 fc02 	bl	80020f8 <HAL_DAC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008fa:	f000 fa11 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000f0 	.word	0x200000f0
 800090c:	40007400 	.word	0x40007400

08000910 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_I2C2_Init+0x54>)
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <MX_I2C2_Init+0x58>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 10000;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C2_Init+0x54>)
 800091c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000920:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_I2C2_Init+0x54>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_I2C2_Init+0x54>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <MX_I2C2_Init+0x54>)
 8000930:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000934:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_I2C2_Init+0x54>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_I2C2_Init+0x54>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_I2C2_Init+0x54>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_I2C2_Init+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_I2C2_Init+0x54>)
 8000950:	f002 f9ec 	bl	8002d2c <HAL_I2C_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800095a:	f000 f9e1 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000164 	.word	0x20000164
 8000968:	40005800 	.word	0x40005800

0800096c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_I2S2_Init+0x54>)
 8000972:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <MX_I2S2_Init+0x58>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_I2S2_Init+0x54>)
 8000978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800097c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_I2S2_Init+0x54>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_I2S2_Init+0x54>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_I2S2_Init+0x54>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_I2S2_Init+0x54>)
 8000992:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000996:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_I2S2_Init+0x54>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_I2S2_Init+0x54>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_I2S2_Init+0x54>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_I2S2_Init+0x54>)
 80009ac:	f002 fb02 	bl	8002fb4 <HAL_I2S_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80009b6:	f000 f9b3 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001b8 	.word	0x200001b8
 80009c4:	40003800 	.word	0x40003800

080009c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3500-1;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009fa:	f640 52ab 	movw	r2, #3499	; 0xdab
 80009fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a0e:	f003 ff43 	bl	8004898 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a18:	f000 f982 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a2a:	f004 f8fd 	bl	8004c28 <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a34:	f000 f974 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a38:	2320      	movs	r3, #32
 8000a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a46:	f004 fb19 	bl	800507c <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f966 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200002c0 	.word	0x200002c0

08000a60 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <MX_TIM14_Init+0x44>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 8400;
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a78:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000a7c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a8c:	f003 ff04 	bl	8004898 <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000a96:	f000 f943 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000308 	.word	0x20000308
 8000aa4:	40002000 	.word	0x40002000

08000aa8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <MX_USART1_UART_Init+0x50>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ae0:	f004 fb5c 	bl	800519c <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aea:	f000 f919 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000350 	.word	0x20000350
 8000af8:	40011000 	.word	0x40011000

08000afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_DMA_Init+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <MX_DMA_Init+0x88>)
 8000b0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_DMA_Init+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_DMA_Init+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <MX_DMA_Init+0x88>)
 8000b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_DMA_Init+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	200e      	movs	r0, #14
 8000b40:	f001 f995 	bl	8001e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b44:	200e      	movs	r0, #14
 8000b46:	f001 f9ae 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f001 f98d 	bl	8001e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b54:	200f      	movs	r0, #15
 8000b56:	f001 f9a6 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2011      	movs	r0, #17
 8000b60:	f001 f985 	bl	8001e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b64:	2011      	movs	r0, #17
 8000b66:	f001 f99e 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2038      	movs	r0, #56	; 0x38
 8000b70:	f001 f97d 	bl	8001e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b74:	2038      	movs	r0, #56	; 0x38
 8000b76:	f001 f996 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <MX_GPIO_Init+0xb8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a26      	ldr	r2, [pc, #152]	; (8000c40 <MX_GPIO_Init+0xb8>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <MX_GPIO_Init+0xb8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <MX_GPIO_Init+0xb8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <MX_GPIO_Init+0xb8>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_GPIO_Init+0xb8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_GPIO_Init+0xb8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <MX_GPIO_Init+0xb8>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_GPIO_Init+0xb8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000bf8:	4812      	ldr	r0, [pc, #72]	; (8000c44 <MX_GPIO_Init+0xbc>)
 8000bfa:	f002 f863 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Status_LED_external_Pin STAT_LED_INT_Pin STAT_LED_EXT_Pin */
  GPIO_InitStruct.Pin = Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin;
 8000bfe:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	4619      	mov	r1, r3
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <MX_GPIO_Init+0xbc>)
 8000c18:	f001 feb8 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_GPIO_Init+0xbc>)
 8000c32:	f001 feab 	bl	800298c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020400 	.word	0x40020400

08000c48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  static int count_1ms = 0;
  static int count_10ms = 0;
  static int count_100ms = 0;
  //static int count_1s = 0;

  if (htim->Instance == TIM14) // 100us
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a27      	ldr	r2, [pc, #156]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d13e      	bne.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x90>
  {
    GL_timer_100us = 1;
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
    count_100us++;
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a25      	ldr	r2, [pc, #148]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c68:	6013      	str	r3, [r2, #0]

    if(count_100us >= 10)
 8000c6a:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b09      	cmp	r3, #9
 8000c70:	dd0a      	ble.n	8000c88 <HAL_TIM_PeriodElapsedCallback+0x40>
    {
      count_100us = 0;
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
      GL_timer_1ms = 1;
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
      count_1ms++;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c86:	6013      	str	r3, [r2, #0]
    }

    if(count_1ms >= 10)
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b09      	cmp	r3, #9
 8000c8e:	dd0a      	ble.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x5e>
    {
      count_1ms = 0;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
      GL_timer_10ms = 1;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
      count_10ms++;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ca4:	6013      	str	r3, [r2, #0]
    }

    if(count_10ms >= 10)
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b09      	cmp	r3, #9
 8000cac:	dd0a      	ble.n	8000cc4 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {
      count_10ms = 0;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
      GL_timer_100ms = 1;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
      count_100ms++;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cc2:	6013      	str	r3, [r2, #0]
      //HAL_GPIO_TogglePin(STAT_LED_INT_GPIO_Port, STAT_LED_INT_Pin);
    }

    if(count_100ms >= 10)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b09      	cmp	r3, #9
 8000cca:	dd05      	ble.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x90>
    {
      count_100ms = 0;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
      GL_timer_1s = 1;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
      //count_1s++;
    }
  
  }

  if (htim->Instance == TIM2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce0:	d102      	bne.n	8000ce8 <HAL_TIM_PeriodElapsedCallback+0xa0>
  {
	  GL_timer_96khz = 1;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
  }
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	40002000 	.word	0x40002000
 8000cf8:	20000030 	.word	0x20000030
 8000cfc:	200006a0 	.word	0x200006a0
 8000d00:	20000034 	.word	0x20000034
 8000d04:	200006a4 	.word	0x200006a4
 8000d08:	20000038 	.word	0x20000038
 8000d0c:	200006a8 	.word	0x200006a8
 8000d10:	2000003c 	.word	0x2000003c
 8000d14:	200006ac 	.word	0x200006ac
 8000d18:	20000040 	.word	0x20000040
 8000d1c:	20000044 	.word	0x20000044

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a2f      	ldr	r2, [pc, #188]	; (8000e58 <HAL_ADC_MspInit+0xdc>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d157      	bne.n	8000e4e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a26      	ldr	r2, [pc, #152]	; (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|POT3_Pin|POT4_Pin
 8000dd6:	231f      	movs	r3, #31
 8000dd8:	617b      	str	r3, [r7, #20]
                          |AD_PWR_SUPPLY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <HAL_ADC_MspInit+0xe4>)
 8000dea:	f001 fdcf 	bl	800298c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000df0:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_ADC_MspInit+0xec>)
 8000df2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e34:	f001 fa3a 	bl	80022ac <HAL_DMA_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e3e:	f7ff ff6f 	bl	8000d20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e46:	639a      	str	r2, [r3, #56]	; 0x38
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	; 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	20000090 	.word	0x20000090
 8000e68:	40026410 	.word	0x40026410

08000e6c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a2f      	ldr	r2, [pc, #188]	; (8000f48 <HAL_DAC_MspInit+0xdc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d158      	bne.n	8000f40 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <HAL_DAC_MspInit+0xe0>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <HAL_DAC_MspInit+0xe0>)
 8000e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <HAL_DAC_MspInit+0xe0>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <HAL_DAC_MspInit+0xe0>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <HAL_DAC_MspInit+0xe0>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <HAL_DAC_MspInit+0xe0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ec6:	2320      	movs	r3, #32
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481d      	ldr	r0, [pc, #116]	; (8000f50 <HAL_DAC_MspInit+0xe4>)
 8000eda:	f001 fd57 	bl	800298c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_DAC_MspInit+0xec>)
 8000ee2:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000ee6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000eea:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000eee:	2240      	movs	r2, #64	; 0x40
 8000ef0:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efe:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f06:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0e:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f16:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000f24:	480b      	ldr	r0, [pc, #44]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000f26:	f001 f9c1 	bl	80022ac <HAL_DMA_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000f30:	f7ff fef6 	bl	8000d20 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_DAC_MspInit+0xe8>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40007400 	.word	0x40007400
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	20000104 	.word	0x20000104
 8000f58:	400260a0 	.word	0x400260a0

08000f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_I2C_MspInit+0x84>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d12c      	bne.n	8000fd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_I2C_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_I2C_MspInit+0x88>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_I2C_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa0:	2312      	movs	r3, #18
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fac:	2304      	movs	r3, #4
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <HAL_I2C_MspInit+0x8c>)
 8000fb8:	f001 fce8 	bl	800298c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_I2C_MspInit+0x88>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_I2C_MspInit+0x88>)
 8000fc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_I2C_MspInit+0x88>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40005800 	.word	0x40005800
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020400 	.word	0x40020400

08000fec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a5b      	ldr	r2, [pc, #364]	; (8001184 <HAL_I2S_MspInit+0x198>)
 8001018:	4293      	cmp	r3, r2
 800101a:	f040 80af 	bne.w	800117c <HAL_I2S_MspInit+0x190>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800101e:	2301      	movs	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001022:	2332      	movs	r3, #50	; 0x32
 8001024:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001026:	2302      	movs	r3, #2
 8001028:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4618      	mov	r0, r3
 8001030:	f003 faf2 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800103a:	f7ff fe71 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <HAL_I2S_MspInit+0x19c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_I2S_MspInit+0x19c>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b4e      	ldr	r3, [pc, #312]	; (8001188 <HAL_I2S_MspInit+0x19c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b4a      	ldr	r3, [pc, #296]	; (8001188 <HAL_I2S_MspInit+0x19c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a49      	ldr	r2, [pc, #292]	; (8001188 <HAL_I2S_MspInit+0x19c>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <HAL_I2S_MspInit+0x19c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001076:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001088:	2305      	movs	r3, #5
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	483e      	ldr	r0, [pc, #248]	; (800118c <HAL_I2S_MspInit+0x1a0>)
 8001094:	f001 fc7a 	bl	800298c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001098:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80010aa:	2306      	movs	r3, #6
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4835      	ldr	r0, [pc, #212]	; (800118c <HAL_I2S_MspInit+0x1a0>)
 80010b6:	f001 fc69 	bl	800298c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_TX Init */
    hdma_i2s2_ext_tx.Instance = DMA1_Stream4;
 80010ba:	4b35      	ldr	r3, [pc, #212]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 80010bc:	4a35      	ldr	r2, [pc, #212]	; (8001194 <HAL_I2S_MspInit+0x1a8>)
 80010be:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_tx.Init.Channel = DMA_CHANNEL_2;
 80010c0:	4b33      	ldr	r3, [pc, #204]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 80010c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010c6:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c8:	4b31      	ldr	r3, [pc, #196]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 80010ca:	2240      	movs	r2, #64	; 0x40
 80010cc:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 80010d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010da:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 80010de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e2:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 80010e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ea:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_tx.Init.Mode = DMA_CIRCULAR;
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 80010ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f2:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_tx) != HAL_OK)
 8001100:	4823      	ldr	r0, [pc, #140]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 8001102:	f001 f8d3 	bl	80022ac <HAL_DMA_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_I2S_MspInit+0x124>
    {
      Error_Handler();
 800110c:	f7ff fe08 	bl	8000d20 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_i2s2_ext_tx);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 8001114:	639a      	str	r2, [r3, #56]	; 0x38
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <HAL_I2S_MspInit+0x1a4>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <HAL_I2S_MspInit+0x1b0>)
 8001120:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 8001136:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800113a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 800113e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001142:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 8001146:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 800114e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001152:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 8001162:	f001 f8a3 	bl	80022ac <HAL_DMA_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_I2S_MspInit+0x184>
    {
      Error_Handler();
 800116c:	f7ff fdd8 	bl	8000d20 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 8001174:	63da      	str	r2, [r3, #60]	; 0x3c
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_I2S_MspInit+0x1ac>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3738      	adds	r7, #56	; 0x38
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40003800 	.word	0x40003800
 8001188:	40023800 	.word	0x40023800
 800118c:	40020400 	.word	0x40020400
 8001190:	20000200 	.word	0x20000200
 8001194:	40026070 	.word	0x40026070
 8001198:	20000260 	.word	0x20000260
 800119c:	40026058 	.word	0x40026058

080011a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b0:	d10e      	bne.n	80011d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_TIM_Base_MspInit+0x70>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a15      	ldr	r2, [pc, #84]	; (8001210 <HAL_TIM_Base_MspInit+0x70>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_TIM_Base_MspInit+0x70>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80011ce:	e01a      	b.n	8001206 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM14)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_TIM_Base_MspInit+0x74>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d115      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_TIM_Base_MspInit+0x70>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_TIM_Base_MspInit+0x70>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_TIM_Base_MspInit+0x70>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	202d      	movs	r0, #45	; 0x2d
 80011fc:	f000 fe37 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001200:	202d      	movs	r0, #45	; 0x2d
 8001202:	f000 fe50 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40002000 	.word	0x40002000

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a19      	ldr	r2, [pc, #100]	; (800129c <HAL_UART_MspInit+0x84>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d12c      	bne.n	8001294 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_UART_MspInit+0x88>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_UART_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001272:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001284:	2307      	movs	r3, #7
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_UART_MspInit+0x8c>)
 8001290:	f001 fb7c 	bl	800298c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40011000 	.word	0x40011000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f4:	f000 f8c2 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <DMA1_Stream3_IRQHandler+0x10>)
 8001302:	f001 f8d9 	bl	80024b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000260 	.word	0x20000260

08001310 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_tx);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <DMA1_Stream4_IRQHandler+0x10>)
 8001316:	f001 f8cf 	bl	80024b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000200 	.word	0x20000200

08001324 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <DMA1_Stream6_IRQHandler+0x10>)
 800132a:	f001 f8c5 	bl	80024b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000104 	.word	0x20000104

08001338 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800133e:	f003 fb6b 	bl	8004a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000308 	.word	0x20000308

0800134c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <DMA2_Stream0_IRQHandler+0x10>)
 8001352:	f001 f8b1 	bl	80024b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000090 	.word	0x20000090

08001360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800138a:	490e      	ldr	r1, [pc, #56]	; (80013c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013a0:	4c0b      	ldr	r4, [pc, #44]	; (80013d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013ae:	f7ff ffd7 	bl	8001360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b2:	f004 f9bd 	bl	8005730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b6:	f7ff f94d 	bl	8000654 <main>
  bx  lr    
 80013ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80013c8:	080057c0 	.word	0x080057c0
  ldr r2, =_sbss
 80013cc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80013d0:	200006b4 	.word	0x200006b4

080013d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC_IRQHandler>
	...

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <HAL_Init+0x40>)
 80013e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_Init+0x40>)
 80013ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_Init+0x40>)
 80013fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 fd29 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	200f      	movs	r0, #15
 8001408:	f000 f808 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff fc8e 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023c00 	.word	0x40023c00

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x54>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x58>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fd41 	bl	8001ec2 <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 fd09 	bl	8001e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_InitTick+0x5c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000008 	.word	0x20000008
 8001474:	20000010 	.word	0x20000010
 8001478:	2000000c 	.word	0x2000000c

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000010 	.word	0x20000010
 80014a0:	200006b0 	.word	0x200006b0

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	200006b0 	.word	0x200006b0

080014bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e033      	b.n	800153a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fc4e 	bl	8000d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d118      	bne.n	800152c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001502:	f023 0302 	bic.w	r3, r3, #2
 8001506:	f043 0202 	orr.w	r2, r3, #2
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fa54 	bl	80019bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f023 0303 	bic.w	r3, r3, #3
 8001522:	f043 0201 	orr.w	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
 800152a:	e001      	b.n	8001530 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Start_DMA+0x1e>
 800155e:	2302      	movs	r3, #2
 8001560:	e0e9      	b.n	8001736 <HAL_ADC_Start_DMA+0x1f2>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b01      	cmp	r3, #1
 8001576:	d018      	beq.n	80015aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001588:	4b6d      	ldr	r3, [pc, #436]	; (8001740 <HAL_ADC_Start_DMA+0x1fc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a6d      	ldr	r2, [pc, #436]	; (8001744 <HAL_ADC_Start_DMA+0x200>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9a      	lsrs	r2, r3, #18
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800159c:	e002      	b.n	80015a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f9      	bne.n	800159e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015b8:	d107      	bne.n	80015ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	f040 80a1 	bne.w	800171c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001604:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001618:	d106      	bne.n	8001628 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f023 0206 	bic.w	r2, r3, #6
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
 8001626:	e002      	b.n	800162e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001636:	4b44      	ldr	r3, [pc, #272]	; (8001748 <HAL_ADC_Start_DMA+0x204>)
 8001638:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163e:	4a43      	ldr	r2, [pc, #268]	; (800174c <HAL_ADC_Start_DMA+0x208>)
 8001640:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001646:	4a42      	ldr	r2, [pc, #264]	; (8001750 <HAL_ADC_Start_DMA+0x20c>)
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	4a41      	ldr	r2, [pc, #260]	; (8001754 <HAL_ADC_Start_DMA+0x210>)
 8001650:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800165a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800166a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800167a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	334c      	adds	r3, #76	; 0x4c
 8001686:	4619      	mov	r1, r3
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f000 febc 	bl	8002408 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	2b00      	cmp	r3, #0
 800169a:	d12a      	bne.n	80016f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a2d      	ldr	r2, [pc, #180]	; (8001758 <HAL_ADC_Start_DMA+0x214>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d015      	beq.n	80016d2 <HAL_ADC_Start_DMA+0x18e>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a2c      	ldr	r2, [pc, #176]	; (800175c <HAL_ADC_Start_DMA+0x218>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d105      	bne.n	80016bc <HAL_ADC_Start_DMA+0x178>
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_ADC_Start_DMA+0x204>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00a      	beq.n	80016d2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a27      	ldr	r2, [pc, #156]	; (8001760 <HAL_ADC_Start_DMA+0x21c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d136      	bne.n	8001734 <HAL_ADC_Start_DMA+0x1f0>
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_ADC_Start_DMA+0x204>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d130      	bne.n	8001734 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d129      	bne.n	8001734 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	e020      	b.n	8001734 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <HAL_ADC_Start_DMA+0x214>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d11b      	bne.n	8001734 <HAL_ADC_Start_DMA+0x1f0>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d114      	bne.n	8001734 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	e00b      	b.n	8001734 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f043 0210 	orr.w	r2, r3, #16
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	f043 0201 	orr.w	r2, r3, #1
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	431bde83 	.word	0x431bde83
 8001748:	40012300 	.word	0x40012300
 800174c:	08001bb5 	.word	0x08001bb5
 8001750:	08001c6f 	.word	0x08001c6f
 8001754:	08001c8b 	.word	0x08001c8b
 8001758:	40012000 	.word	0x40012000
 800175c:	40012100 	.word	0x40012100
 8001760:	40012200 	.word	0x40012200

08001764 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1c>
 8001790:	2302      	movs	r3, #2
 8001792:	e105      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x228>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b09      	cmp	r3, #9
 80017a2:	d925      	bls.n	80017f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68d9      	ldr	r1, [r3, #12]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	3b1e      	subs	r3, #30
 80017ba:	2207      	movs	r2, #7
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43da      	mvns	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	400a      	ands	r2, r1
 80017c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68d9      	ldr	r1, [r3, #12]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	4603      	mov	r3, r0
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4403      	add	r3, r0
 80017e2:	3b1e      	subs	r3, #30
 80017e4:	409a      	lsls	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	e022      	b.n	8001836 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6919      	ldr	r1, [r3, #16]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	2207      	movs	r2, #7
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	400a      	ands	r2, r1
 8001812:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6919      	ldr	r1, [r3, #16]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	4618      	mov	r0, r3
 8001826:	4603      	mov	r3, r0
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4403      	add	r3, r0
 800182c:	409a      	lsls	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b06      	cmp	r3, #6
 800183c:	d824      	bhi.n	8001888 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	3b05      	subs	r3, #5
 8001850:	221f      	movs	r2, #31
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	400a      	ands	r2, r1
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b05      	subs	r3, #5
 800187a:	fa00 f203 	lsl.w	r2, r0, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	635a      	str	r2, [r3, #52]	; 0x34
 8001886:	e04c      	b.n	8001922 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d824      	bhi.n	80018da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	3b23      	subs	r3, #35	; 0x23
 80018a2:	221f      	movs	r2, #31
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43da      	mvns	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	400a      	ands	r2, r1
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b23      	subs	r3, #35	; 0x23
 80018cc:	fa00 f203 	lsl.w	r2, r0, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
 80018d8:	e023      	b.n	8001922 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	3b41      	subs	r3, #65	; 0x41
 80018ec:	221f      	movs	r2, #31
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	400a      	ands	r2, r1
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	4618      	mov	r0, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	3b41      	subs	r3, #65	; 0x41
 8001916:	fa00 f203 	lsl.w	r2, r0, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_ADC_ConfigChannel+0x234>)
 8001924:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <HAL_ADC_ConfigChannel+0x238>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d109      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x1cc>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b12      	cmp	r3, #18
 8001936:	d105      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <HAL_ADC_ConfigChannel+0x238>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d123      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x21e>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d003      	beq.n	800195e <HAL_ADC_ConfigChannel+0x1e6>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b11      	cmp	r3, #17
 800195c:	d11b      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b10      	cmp	r3, #16
 8001970:	d111      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_ADC_ConfigChannel+0x23c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <HAL_ADC_ConfigChannel+0x240>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	0c9a      	lsrs	r2, r3, #18
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001988:	e002      	b.n	8001990 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3b01      	subs	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f9      	bne.n	800198a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40012300 	.word	0x40012300
 80019b0:	40012000 	.word	0x40012000
 80019b4:	20000008 	.word	0x20000008
 80019b8:	431bde83 	.word	0x431bde83

080019bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c4:	4b79      	ldr	r3, [pc, #484]	; (8001bac <ADC_Init+0x1f0>)
 80019c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	431a      	orrs	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	021a      	lsls	r2, r3, #8
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6859      	ldr	r1, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6899      	ldr	r1, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <ADC_Init+0x1f4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d022      	beq.n	8001a9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6899      	ldr	r1, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6899      	ldr	r1, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	e00f      	b.n	8001aba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ab8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0202 	bic.w	r2, r2, #2
 8001ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6899      	ldr	r1, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7e1b      	ldrb	r3, [r3, #24]
 8001ad4:	005a      	lsls	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d01b      	beq.n	8001b20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001af6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6859      	ldr	r1, [r3, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	3b01      	subs	r3, #1
 8001b14:	035a      	lsls	r2, r3, #13
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	e007      	b.n	8001b30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	051a      	lsls	r2, r3, #20
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6899      	ldr	r1, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b72:	025a      	lsls	r2, r3, #9
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6899      	ldr	r1, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	029a      	lsls	r2, r3, #10
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	609a      	str	r2, [r3, #8]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40012300 	.word	0x40012300
 8001bb0:	0f000001 	.word	0x0f000001

08001bb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d13c      	bne.n	8001c48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d12b      	bne.n	8001c40 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d127      	bne.n	8001c40 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d119      	bne.n	8001c40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0220 	bic.w	r2, r2, #32
 8001c1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f7fe fc9b 	bl	800057c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c46:	e00e      	b.n	8001c66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff fd85 	bl	8001764 <HAL_ADC_ErrorCallback>
}
 8001c5a:	e004      	b.n	8001c66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7fe fc5d 	bl	800053c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2240      	movs	r2, #64	; 0x40
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f043 0204 	orr.w	r2, r3, #4
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f7ff fd5a 	bl	8001764 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <__NVIC_GetPriorityGrouping+0x18>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	f003 0307 	and.w	r3, r3, #7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	db0b      	blt.n	8001d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	4907      	ldr	r1, [pc, #28]	; (8001d54 <__NVIC_EnableIRQ+0x38>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e24:	d301      	bcc.n	8001e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <SysTick_Config+0x40>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e32:	210f      	movs	r1, #15
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f7ff ff8e 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <SysTick_Config+0x40>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <SysTick_Config+0x40>)
 8001e44:	2207      	movs	r2, #7
 8001e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff29 	bl	8001cb8 <__NVIC_SetPriorityGrouping>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e80:	f7ff ff3e 	bl	8001d00 <__NVIC_GetPriorityGrouping>
 8001e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ff8e 	bl	8001dac <NVIC_EncodePriority>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff5d 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff31 	bl	8001d1c <__NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffa2 	bl	8001e14 <SysTick_Config>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e014      	b.n	8001f16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	791b      	ldrb	r3, [r3, #4]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d105      	bne.n	8001f02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7fe ffb5 	bl	8000e6c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	795b      	ldrb	r3, [r3, #5]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_DAC_Start_DMA+0x22>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e0ab      	b.n	800209a <HAL_DAC_Start_DMA+0x17a>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d12f      	bne.n	8001fb4 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_DAC_Start_DMA+0x184>)
 8001f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4a51      	ldr	r2, [pc, #324]	; (80020a8 <HAL_DAC_Start_DMA+0x188>)
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a50      	ldr	r2, [pc, #320]	; (80020ac <HAL_DAC_Start_DMA+0x18c>)
 8001f6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d013      	beq.n	8001faa <HAL_DAC_Start_DMA+0x8a>
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d845      	bhi.n	8002014 <HAL_DAC_Start_DMA+0xf4>
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_DAC_Start_DMA+0x76>
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d005      	beq.n	8001fa0 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001f94:	e03e      	b.n	8002014 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3308      	adds	r3, #8
 8001f9c:	613b      	str	r3, [r7, #16]
        break;
 8001f9e:	e03c      	b.n	800201a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	330c      	adds	r3, #12
 8001fa6:	613b      	str	r3, [r7, #16]
        break;
 8001fa8:	e037      	b.n	800201a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3310      	adds	r3, #16
 8001fb0:	613b      	str	r3, [r7, #16]
        break;
 8001fb2:	e032      	b.n	800201a <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a3d      	ldr	r2, [pc, #244]	; (80020b0 <HAL_DAC_Start_DMA+0x190>)
 8001fba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a3c      	ldr	r2, [pc, #240]	; (80020b4 <HAL_DAC_Start_DMA+0x194>)
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4a3b      	ldr	r2, [pc, #236]	; (80020b8 <HAL_DAC_Start_DMA+0x198>)
 8001fca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fda:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d013      	beq.n	800200a <HAL_DAC_Start_DMA+0xea>
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d817      	bhi.n	8002018 <HAL_DAC_Start_DMA+0xf8>
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_DAC_Start_DMA+0xd6>
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d005      	beq.n	8002000 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001ff4:	e010      	b.n	8002018 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3314      	adds	r3, #20
 8001ffc:	613b      	str	r3, [r7, #16]
        break;
 8001ffe:	e00c      	b.n	800201a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3318      	adds	r3, #24
 8002006:	613b      	str	r3, [r7, #16]
        break;
 8002008:	e007      	b.n	800201a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	331c      	adds	r3, #28
 8002010:	613b      	str	r3, [r7, #16]
        break;
 8002012:	e002      	b.n	800201a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002014:	bf00      	nop
 8002016:	e000      	b.n	800201a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002018:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d111      	bne.n	8002044 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800202e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6898      	ldr	r0, [r3, #8]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	f000 f9e5 	bl	8002408 <HAL_DMA_Start_IT>
 800203e:	4603      	mov	r3, r0
 8002040:	75fb      	strb	r3, [r7, #23]
 8002042:	e010      	b.n	8002066 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002052:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68d8      	ldr	r0, [r3, #12]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	f000 f9d3 	bl	8002408 <HAL_DMA_Start_IT>
 8002062:	4603      	mov	r3, r0
 8002064:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6819      	ldr	r1, [r3, #0]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2201      	movs	r2, #1
 8002080:	409a      	lsls	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e005      	b.n	8002098 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f043 0204 	orr.w	r2, r3, #4
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002098:	7dfb      	ldrb	r3, [r7, #23]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	08002197 	.word	0x08002197
 80020a8:	080021b9 	.word	0x080021b9
 80020ac:	080021d5 	.word	0x080021d5
 80020b0:	0800223f 	.word	0x0800223f
 80020b4:	08002261 	.word	0x08002261
 80020b8:	0800227d 	.word	0x0800227d

080020bc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	795b      	ldrb	r3, [r3, #5]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_DAC_ConfigChannel+0x18>
 800210c:	2302      	movs	r3, #2
 800210e:	e03c      	b.n	800218a <HAL_DAC_ConfigChannel+0x92>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2202      	movs	r2, #2
 800211a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4013      	ands	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6819      	ldr	r1, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	22c0      	movs	r2, #192	; 0xc0
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7ff ff89 	bl	80020bc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	711a      	strb	r2, [r3, #4]
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f7ff ff82 	bl	80020d0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f043 0204 	orr.w	r2, r3, #4
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f7ff ff78 	bl	80020e4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	711a      	strb	r2, [r3, #4]
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7ff ffd8 	bl	8002202 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	711a      	strb	r2, [r3, #4]
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7ff ffd1 	bl	8002216 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f043 0204 	orr.w	r2, r3, #4
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f7ff ffc7 	bl	800222a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	711a      	strb	r2, [r3, #4]
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff f8f4 	bl	80014a4 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e099      	b.n	80023fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e8:	e00f      	b.n	800230a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ea:	f7ff f8db 	bl	80014a4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d908      	bls.n	800230a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2203      	movs	r2, #3
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e078      	b.n	80023fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e8      	bne.n	80022ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_DMA_Init+0x158>)
 8002324:	4013      	ands	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2b04      	cmp	r3, #4
 8002362:	d107      	bne.n	8002374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	4313      	orrs	r3, r2
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f023 0307 	bic.w	r3, r3, #7
 800238a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2b04      	cmp	r3, #4
 800239c:	d117      	bne.n	80023ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fa6f 	bl	8002894 <DMA_CheckFifoParam>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023ca:	2301      	movs	r3, #1
 80023cc:	e016      	b.n	80023fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fa26 	bl	8002828 <DMA_CalcBaseAndBitshift>
 80023dc:	4603      	mov	r3, r0
 80023de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	223f      	movs	r2, #63	; 0x3f
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	f010803f 	.word	0xf010803f

08002408 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_DMA_Start_IT+0x26>
 800242a:	2302      	movs	r3, #2
 800242c:	e040      	b.n	80024b0 <HAL_DMA_Start_IT+0xa8>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d12f      	bne.n	80024a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f9b8 	bl	80027cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	223f      	movs	r2, #63	; 0x3f
 8002462:	409a      	lsls	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0216 	orr.w	r2, r2, #22
 8002476:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0208 	orr.w	r2, r2, #8
 800248e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e005      	b.n	80024ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
 80024ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024c4:	4b8e      	ldr	r3, [pc, #568]	; (8002700 <HAL_DMA_IRQHandler+0x248>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a8e      	ldr	r2, [pc, #568]	; (8002704 <HAL_DMA_IRQHandler+0x24c>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0a9b      	lsrs	r3, r3, #10
 80024d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2208      	movs	r2, #8
 80024e4:	409a      	lsls	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01a      	beq.n	8002524 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0204 	bic.w	r2, r2, #4
 800250a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	2208      	movs	r2, #8
 8002512:	409a      	lsls	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	2201      	movs	r2, #1
 800252a:	409a      	lsls	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d012      	beq.n	800255a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	2201      	movs	r2, #1
 8002548:	409a      	lsls	r2, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	f043 0202 	orr.w	r2, r3, #2
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	2204      	movs	r2, #4
 8002560:	409a      	lsls	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d012      	beq.n	8002590 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00b      	beq.n	8002590 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	2204      	movs	r2, #4
 800257e:	409a      	lsls	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	f043 0204 	orr.w	r2, r3, #4
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	2210      	movs	r2, #16
 8002596:	409a      	lsls	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d043      	beq.n	8002628 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d03c      	beq.n	8002628 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	2210      	movs	r2, #16
 80025b4:	409a      	lsls	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d018      	beq.n	80025fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d108      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d024      	beq.n	8002628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
 80025e6:	e01f      	b.n	8002628 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01b      	beq.n	8002628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
 80025f8:	e016      	b.n	8002628 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d107      	bne.n	8002618 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0208 	bic.w	r2, r2, #8
 8002616:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2220      	movs	r2, #32
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 808f 	beq.w	8002758 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8087 	beq.w	8002758 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	2220      	movs	r2, #32
 8002650:	409a      	lsls	r2, r3
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b05      	cmp	r3, #5
 8002660:	d136      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0216 	bic.w	r2, r2, #22
 8002670:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002680:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_DMA_IRQHandler+0x1da>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0208 	bic.w	r2, r2, #8
 80026a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a6:	223f      	movs	r2, #63	; 0x3f
 80026a8:	409a      	lsls	r2, r3
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d07e      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
        }
        return;
 80026ce:	e079      	b.n	80027c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01d      	beq.n	800271a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10d      	bne.n	8002708 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d031      	beq.n	8002758 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
 80026fc:	e02c      	b.n	8002758 <HAL_DMA_IRQHandler+0x2a0>
 80026fe:	bf00      	nop
 8002700:	20000008 	.word	0x20000008
 8002704:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d023      	beq.n	8002758 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
 8002718:	e01e      	b.n	8002758 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10f      	bne.n	8002748 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0210 	bic.w	r2, r2, #16
 8002736:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	2b00      	cmp	r3, #0
 800275e:	d032      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d022      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2205      	movs	r2, #5
 8002770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	3301      	adds	r3, #1
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	d307      	bcc.n	80027a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f2      	bne.n	8002784 <HAL_DMA_IRQHandler+0x2cc>
 800279e:	e000      	b.n	80027a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
 80027c2:	e000      	b.n	80027c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027c4:	bf00      	nop
    }
  }
}
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	d108      	bne.n	800280c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800280a:	e007      	b.n	800281c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	3b10      	subs	r3, #16
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <DMA_CalcBaseAndBitshift+0x64>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <DMA_CalcBaseAndBitshift+0x68>)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d909      	bls.n	800286a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	1d1a      	adds	r2, r3, #4
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	659a      	str	r2, [r3, #88]	; 0x58
 8002868:	e007      	b.n	800287a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	aaaaaaab 	.word	0xaaaaaaab
 8002890:	080057a8 	.word	0x080057a8

08002894 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11f      	bne.n	80028ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d856      	bhi.n	8002962 <DMA_CheckFifoParam+0xce>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <DMA_CheckFifoParam+0x28>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028df 	.word	0x080028df
 80028c4:	080028cd 	.word	0x080028cd
 80028c8:	08002963 	.word	0x08002963
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d046      	beq.n	8002966 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028dc:	e043      	b.n	8002966 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028e6:	d140      	bne.n	800296a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ec:	e03d      	b.n	800296a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f6:	d121      	bne.n	800293c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d837      	bhi.n	800296e <DMA_CheckFifoParam+0xda>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <DMA_CheckFifoParam+0x70>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002915 	.word	0x08002915
 8002908:	0800291b 	.word	0x0800291b
 800290c:	08002915 	.word	0x08002915
 8002910:	0800292d 	.word	0x0800292d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e030      	b.n	800297c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d025      	beq.n	8002972 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292a:	e022      	b.n	8002972 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002934:	d11f      	bne.n	8002976 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800293a:	e01c      	b.n	8002976 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d903      	bls.n	800294a <DMA_CheckFifoParam+0xb6>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d003      	beq.n	8002950 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002948:	e018      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      break;
 800294e:	e015      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00e      	beq.n	800297a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      break;
 8002960:	e00b      	b.n	800297a <DMA_CheckFifoParam+0xe6>
      break;
 8002962:	bf00      	nop
 8002964:	e00a      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
 8002968:	e008      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
 800296c:	e006      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800296e:	bf00      	nop
 8002970:	e004      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
 8002974:	e002      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;   
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
    }
  } 
  
  return status; 
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop

0800298c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	e16b      	b.n	8002c80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029a8:	2201      	movs	r2, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	f040 815a 	bne.w	8002c7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d005      	beq.n	80029de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d130      	bne.n	8002a40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	2203      	movs	r2, #3
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a14:	2201      	movs	r2, #1
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 0201 	and.w	r2, r3, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d017      	beq.n	8002a7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d123      	bne.n	8002ad0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	08da      	lsrs	r2, r3, #3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3208      	adds	r2, #8
 8002a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	08da      	lsrs	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3208      	adds	r2, #8
 8002aca:	69b9      	ldr	r1, [r7, #24]
 8002acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0203 	and.w	r2, r3, #3
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80b4 	beq.w	8002c7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b60      	ldr	r3, [pc, #384]	; (8002c98 <HAL_GPIO_Init+0x30c>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	4a5f      	ldr	r2, [pc, #380]	; (8002c98 <HAL_GPIO_Init+0x30c>)
 8002b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b20:	6453      	str	r3, [r2, #68]	; 0x44
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_GPIO_Init+0x30c>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b2e:	4a5b      	ldr	r2, [pc, #364]	; (8002c9c <HAL_GPIO_Init+0x310>)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	3302      	adds	r3, #2
 8002b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	220f      	movs	r2, #15
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_GPIO_Init+0x314>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d02b      	beq.n	8002bb2 <HAL_GPIO_Init+0x226>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a51      	ldr	r2, [pc, #324]	; (8002ca4 <HAL_GPIO_Init+0x318>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d025      	beq.n	8002bae <HAL_GPIO_Init+0x222>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a50      	ldr	r2, [pc, #320]	; (8002ca8 <HAL_GPIO_Init+0x31c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01f      	beq.n	8002baa <HAL_GPIO_Init+0x21e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4f      	ldr	r2, [pc, #316]	; (8002cac <HAL_GPIO_Init+0x320>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d019      	beq.n	8002ba6 <HAL_GPIO_Init+0x21a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_GPIO_Init+0x324>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_GPIO_Init+0x216>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <HAL_GPIO_Init+0x328>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00d      	beq.n	8002b9e <HAL_GPIO_Init+0x212>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4c      	ldr	r2, [pc, #304]	; (8002cb8 <HAL_GPIO_Init+0x32c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <HAL_GPIO_Init+0x20e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <HAL_GPIO_Init+0x330>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_GPIO_Init+0x20a>
 8002b92:	2307      	movs	r3, #7
 8002b94:	e00e      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002b96:	2308      	movs	r3, #8
 8002b98:	e00c      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002b9a:	2306      	movs	r3, #6
 8002b9c:	e00a      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002b9e:	2305      	movs	r3, #5
 8002ba0:	e008      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e004      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e002      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	f002 0203 	and.w	r2, r2, #3
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	4093      	lsls	r3, r2
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc4:	4935      	ldr	r1, [pc, #212]	; (8002c9c <HAL_GPIO_Init+0x310>)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf6:	4a32      	ldr	r2, [pc, #200]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bfc:	4b30      	ldr	r3, [pc, #192]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c20:	4a27      	ldr	r2, [pc, #156]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c26:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4a:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c74:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	f67f ae90 	bls.w	80029a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	40020000 	.word	0x40020000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40020800 	.word	0x40020800
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40021400 	.word	0x40021400
 8002cb8:	40021800 	.word	0x40021800
 8002cbc:	40021c00 	.word	0x40021c00
 8002cc0:	40013c00 	.word	0x40013c00

08002cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd4:	787b      	ldrb	r3, [r7, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce0:	e003      	b.n	8002cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ce2:	887b      	ldrh	r3, [r7, #2]
 8002ce4:	041a      	lsls	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	619a      	str	r2, [r3, #24]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d08:	887a      	ldrh	r2, [r7, #2]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	041a      	lsls	r2, r3, #16
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	400b      	ands	r3, r1
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	619a      	str	r2, [r3, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e12b      	b.n	8002f96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe f902 	bl	8000f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d90:	f001 fc1a 	bl	80045c8 <HAL_RCC_GetPCLK1Freq>
 8002d94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4a81      	ldr	r2, [pc, #516]	; (8002fa0 <HAL_I2C_Init+0x274>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d807      	bhi.n	8002db0 <HAL_I2C_Init+0x84>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a80      	ldr	r2, [pc, #512]	; (8002fa4 <HAL_I2C_Init+0x278>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	bf94      	ite	ls
 8002da8:	2301      	movls	r3, #1
 8002daa:	2300      	movhi	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e006      	b.n	8002dbe <HAL_I2C_Init+0x92>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a7d      	ldr	r2, [pc, #500]	; (8002fa8 <HAL_I2C_Init+0x27c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	bf94      	ite	ls
 8002db8:	2301      	movls	r3, #1
 8002dba:	2300      	movhi	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0e7      	b.n	8002f96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a78      	ldr	r2, [pc, #480]	; (8002fac <HAL_I2C_Init+0x280>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	0c9b      	lsrs	r3, r3, #18
 8002dd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a6a      	ldr	r2, [pc, #424]	; (8002fa0 <HAL_I2C_Init+0x274>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d802      	bhi.n	8002e00 <HAL_I2C_Init+0xd4>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	e009      	b.n	8002e14 <HAL_I2C_Init+0xe8>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	4a69      	ldr	r2, [pc, #420]	; (8002fb0 <HAL_I2C_Init+0x284>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	3301      	adds	r3, #1
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	495c      	ldr	r1, [pc, #368]	; (8002fa0 <HAL_I2C_Init+0x274>)
 8002e30:	428b      	cmp	r3, r1
 8002e32:	d819      	bhi.n	8002e68 <HAL_I2C_Init+0x13c>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e59      	subs	r1, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e42:	1c59      	adds	r1, r3, #1
 8002e44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e48:	400b      	ands	r3, r1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_I2C_Init+0x138>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1e59      	subs	r1, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e62:	e051      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002e64:	2304      	movs	r3, #4
 8002e66:	e04f      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d111      	bne.n	8002e94 <HAL_I2C_Init+0x168>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e58      	subs	r0, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e012      	b.n	8002eba <HAL_I2C_Init+0x18e>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	0099      	lsls	r1, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Init+0x196>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e022      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_I2C_Init+0x1bc>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1e58      	subs	r0, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	440b      	add	r3, r1
 8002ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee6:	e00f      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e58      	subs	r0, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	0099      	lsls	r1, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	6809      	ldr	r1, [r1, #0]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6911      	ldr	r1, [r2, #16]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68d2      	ldr	r2, [r2, #12]
 8002f42:	4311      	orrs	r1, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	000186a0 	.word	0x000186a0
 8002fa4:	001e847f 	.word	0x001e847f
 8002fa8:	003d08ff 	.word	0x003d08ff
 8002fac:	431bde83 	.word	0x431bde83
 8002fb0:	10624dd3 	.word	0x10624dd3

08002fb4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e128      	b.n	8003218 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a90      	ldr	r2, [pc, #576]	; (8003220 <HAL_I2S_Init+0x26c>)
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fe f803 	bl	8000fec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ffc:	f023 030f 	bic.w	r3, r3, #15
 8003000:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2202      	movs	r2, #2
 8003008:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d060      	beq.n	80030d4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800301a:	2310      	movs	r3, #16
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e001      	b.n	8003024 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b20      	cmp	r3, #32
 800302a:	d802      	bhi.n	8003032 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003032:	2001      	movs	r0, #1
 8003034:	f001 fbd2 	bl	80047dc <HAL_RCCEx_GetPeriphCLKFreq>
 8003038:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003042:	d125      	bne.n	8003090 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d010      	beq.n	800306e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	fbb2 f2f3 	udiv	r2, r2, r3
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	461a      	mov	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	3305      	adds	r3, #5
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e01f      	b.n	80030ae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	fbb2 f2f3 	udiv	r2, r2, r3
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	461a      	mov	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	3305      	adds	r3, #5
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e00e      	b.n	80030ae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	fbb2 f2f3 	udiv	r2, r2, r3
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	461a      	mov	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	3305      	adds	r3, #5
 80030ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4a5c      	ldr	r2, [pc, #368]	; (8003224 <HAL_I2S_Init+0x270>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	08db      	lsrs	r3, r3, #3
 80030b8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	e003      	b.n	80030dc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030d4:	2302      	movs	r3, #2
 80030d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d902      	bls.n	80030e8 <HAL_I2S_Init+0x134>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2bff      	cmp	r3, #255	; 0xff
 80030e6:	d907      	bls.n	80030f8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f043 0210 	orr.w	r2, r3, #16
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e08f      	b.n	8003218 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	ea42 0103 	orr.w	r1, r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	430a      	orrs	r2, r1
 800310a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003116:	f023 030f 	bic.w	r3, r3, #15
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6851      	ldr	r1, [r2, #4]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68d2      	ldr	r2, [r2, #12]
 8003128:	4311      	orrs	r1, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6992      	ldr	r2, [r2, #24]
 800312e:	430a      	orrs	r2, r1
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800313a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d161      	bne.n	8003208 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a38      	ldr	r2, [pc, #224]	; (8003228 <HAL_I2S_Init+0x274>)
 8003148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a37      	ldr	r2, [pc, #220]	; (800322c <HAL_I2S_Init+0x278>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_I2S_Init+0x1a4>
 8003154:	4b36      	ldr	r3, [pc, #216]	; (8003230 <HAL_I2S_Init+0x27c>)
 8003156:	e001      	b.n	800315c <HAL_I2S_Init+0x1a8>
 8003158:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	4932      	ldr	r1, [pc, #200]	; (800322c <HAL_I2S_Init+0x278>)
 8003164:	428a      	cmp	r2, r1
 8003166:	d101      	bne.n	800316c <HAL_I2S_Init+0x1b8>
 8003168:	4a31      	ldr	r2, [pc, #196]	; (8003230 <HAL_I2S_Init+0x27c>)
 800316a:	e001      	b.n	8003170 <HAL_I2S_Init+0x1bc>
 800316c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003170:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003174:	f023 030f 	bic.w	r3, r3, #15
 8003178:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2b      	ldr	r2, [pc, #172]	; (800322c <HAL_I2S_Init+0x278>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d101      	bne.n	8003188 <HAL_I2S_Init+0x1d4>
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_I2S_Init+0x27c>)
 8003186:	e001      	b.n	800318c <HAL_I2S_Init+0x1d8>
 8003188:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800318c:	2202      	movs	r2, #2
 800318e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a25      	ldr	r2, [pc, #148]	; (800322c <HAL_I2S_Init+0x278>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d101      	bne.n	800319e <HAL_I2S_Init+0x1ea>
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_I2S_Init+0x27c>)
 800319c:	e001      	b.n	80031a2 <HAL_I2S_Init+0x1ee>
 800319e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ae:	d003      	beq.n	80031b8 <HAL_I2S_Init+0x204>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d103      	bne.n	80031c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80031b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	e001      	b.n	80031c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031ce:	4313      	orrs	r3, r2
 80031d0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031d8:	4313      	orrs	r3, r2
 80031da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a0d      	ldr	r2, [pc, #52]	; (800322c <HAL_I2S_Init+0x278>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <HAL_I2S_Init+0x24c>
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <HAL_I2S_Init+0x27c>)
 80031fe:	e001      	b.n	8003204 <HAL_I2S_Init+0x250>
 8003200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003204:	897a      	ldrh	r2, [r7, #10]
 8003206:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	0800332b 	.word	0x0800332b
 8003224:	cccccccd 	.word	0xcccccccd
 8003228:	08003755 	.word	0x08003755
 800322c:	40003800 	.word	0x40003800
 8003230:	40003400 	.word	0x40003400

08003234 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1c9a      	adds	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10e      	bne.n	80032c4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032b4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ffb8 	bl	8003234 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	b292      	uxth	r2, r2
 80032e0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	1c9a      	adds	r2, r3, #2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10e      	bne.n	8003322 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003312:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ff93 	bl	8003248 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b04      	cmp	r3, #4
 8003344:	d13a      	bne.n	80033bc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d109      	bne.n	8003364 <I2S_IRQHandler+0x3a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b40      	cmp	r3, #64	; 0x40
 800335c:	d102      	bne.n	8003364 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffb4 	bl	80032cc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	d126      	bne.n	80033bc <I2S_IRQHandler+0x92>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b20      	cmp	r3, #32
 800337a:	d11f      	bne.n	80033bc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800338a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f043 0202 	orr.w	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ff50 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d136      	bne.n	8003436 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d109      	bne.n	80033e6 <I2S_IRQHandler+0xbc>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d102      	bne.n	80033e6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ff45 	bl	8003270 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d122      	bne.n	8003436 <I2S_IRQHandler+0x10c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d11b      	bne.n	8003436 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800340c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ff13 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d002      	beq.n	800346c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003466:	2302      	movs	r3, #2
 8003468:	77fb      	strb	r3, [r7, #31]
    goto error;
 800346a:	e160      	b.n	800372e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003478:	887b      	ldrh	r3, [r7, #2]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e15a      	b.n	8003738 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800348e:	2302      	movs	r3, #2
 8003490:	e152      	b.n	8003738 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d002      	beq.n	80034be <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d114      	bne.n	80034e8 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80034be:	887b      	ldrh	r3, [r7, #2]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80034d2:	887b      	ldrh	r3, [r7, #2]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80034dc:	887b      	ldrh	r3, [r7, #2]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	865a      	strh	r2, [r3, #50]	; 0x32
 80034e6:	e00b      	b.n	8003500 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	887a      	ldrh	r2, [r7, #2]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	887a      	ldrh	r2, [r7, #2]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	887a      	ldrh	r2, [r7, #2]
 80034fe:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2205      	movs	r2, #5
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	4a8b      	ldr	r2, [pc, #556]	; (8003740 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003514:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	4a8a      	ldr	r2, [pc, #552]	; (8003744 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 800351c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	4a89      	ldr	r2, [pc, #548]	; (8003748 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003524:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	2200      	movs	r2, #0
 800352c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	2200      	movs	r2, #0
 8003534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	4a83      	ldr	r2, [pc, #524]	; (8003748 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 800353c:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003548:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003550:	d002      	beq.n	8003558 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d16b      	bne.n	8003630 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a79      	ldr	r2, [pc, #484]	; (800374c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d101      	bne.n	800356e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800356a:	4b79      	ldr	r3, [pc, #484]	; (8003750 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800356c:	e001      	b.n	8003572 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800356e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003572:	330c      	adds	r3, #12
 8003574:	4619      	mov	r1, r3
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800357e:	b29b      	uxth	r3, r3
 8003580:	f7fe ff42 	bl	8002408 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a70      	ldr	r2, [pc, #448]	; (800374c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800358e:	4b70      	ldr	r3, [pc, #448]	; (8003750 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003590:	e001      	b.n	8003596 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8003592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	496b      	ldr	r1, [pc, #428]	; (800374c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800359e:	428b      	cmp	r3, r1
 80035a0:	d101      	bne.n	80035a6 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80035a2:	4b6b      	ldr	r3, [pc, #428]	; (8003750 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80035a4:	e001      	b.n	80035aa <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 80035a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	6819      	ldr	r1, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	461a      	mov	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f7fe ff1c 	bl	8002408 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0202 	orr.w	r2, r2, #2
 80035de:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ee:	f000 809e 	beq.w	800372e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a55      	ldr	r2, [pc, #340]	; (800374c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d101      	bne.n	8003600 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80035fc:	4b54      	ldr	r3, [pc, #336]	; (8003750 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80035fe:	e001      	b.n	8003604 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8003600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4950      	ldr	r1, [pc, #320]	; (800374c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800360c:	428b      	cmp	r3, r1
 800360e:	d101      	bne.n	8003614 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8003610:	4b4f      	ldr	r3, [pc, #316]	; (8003750 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003612:	e001      	b.n	8003618 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8003614:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800361c:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800362c:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800362e:	e07e      	b.n	800372e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363e:	d10a      	bne.n	8003656 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003656:	f107 0308 	add.w	r3, r7, #8
 800365a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a38      	ldr	r2, [pc, #224]	; (800374c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d101      	bne.n	8003672 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800366e:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003670:	e001      	b.n	8003676 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8003672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003676:	330c      	adds	r3, #12
 8003678:	461a      	mov	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	b29b      	uxth	r3, r3
 8003680:	f7fe fec2 	bl	8002408 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a30      	ldr	r2, [pc, #192]	; (800374c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800368e:	4b30      	ldr	r3, [pc, #192]	; (8003750 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003690:	e001      	b.n	8003696 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8003692:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	492b      	ldr	r1, [pc, #172]	; (800374c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800369e:	428b      	cmp	r3, r1
 80036a0:	d101      	bne.n	80036a6 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80036a4:	e001      	b.n	80036aa <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80036a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036aa:	f042 0202 	orr.w	r2, r2, #2
 80036ae:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	4619      	mov	r1, r3
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f7fe fe9d 	bl	8002408 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0201 	orr.w	r2, r2, #1
 80036dc:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ec:	d01e      	beq.n	800372c <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a16      	ldr	r2, [pc, #88]	; (800374c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80036f8:	4b15      	ldr	r3, [pc, #84]	; (8003750 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80036fa:	e001      	b.n	8003700 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80036fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4911      	ldr	r1, [pc, #68]	; (800374c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003708:	428b      	cmp	r3, r1
 800370a:	d101      	bne.n	8003710 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800370e:	e001      	b.n	8003714 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003718:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003728:	61da      	str	r2, [r3, #28]
 800372a:	e000      	b.n	800372e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 800372c:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003736:	7ffb      	ldrb	r3, [r7, #31]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	080039fd 	.word	0x080039fd
 8003744:	08003a19 	.word	0x08003a19
 8003748:	08003af1 	.word	0x08003af1
 800374c:	40003800 	.word	0x40003800
 8003750:	40003400 	.word	0x40003400

08003754 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a92      	ldr	r2, [pc, #584]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d101      	bne.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800376e:	4b92      	ldr	r3, [pc, #584]	; (80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003770:	e001      	b.n	8003776 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003772:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a8b      	ldr	r2, [pc, #556]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800378c:	4b8a      	ldr	r3, [pc, #552]	; (80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800378e:	e001      	b.n	8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a0:	d004      	beq.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 8099 	bne.w	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d107      	bne.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f9d5 	bl	8003b70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa78 	bl	8003cd0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d13a      	bne.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d035      	beq.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6e      	ldr	r2, [pc, #440]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037fe:	4b6e      	ldr	r3, [pc, #440]	; (80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003800:	e001      	b.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4969      	ldr	r1, [pc, #420]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800380e:	428b      	cmp	r3, r1
 8003810:	d101      	bne.n	8003816 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003812:	4b69      	ldr	r3, [pc, #420]	; (80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003814:	e001      	b.n	800381a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800381a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800381e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800382e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f043 0202 	orr.w	r2, r3, #2
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff fcfe 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b08      	cmp	r3, #8
 8003868:	f040 80c3 	bne.w	80039f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 80bd 	beq.w	80039f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003886:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a49      	ldr	r2, [pc, #292]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003892:	4b49      	ldr	r3, [pc, #292]	; (80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003894:	e001      	b.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4944      	ldr	r1, [pc, #272]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038a2:	428b      	cmp	r3, r1
 80038a4:	d101      	bne.n	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80038a6:	4b44      	ldr	r3, [pc, #272]	; (80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a8:	e001      	b.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f043 0204 	orr.w	r2, r3, #4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff fcc0 	bl	800325c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038dc:	e089      	b.n	80039f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d107      	bne.n	80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f96e 	bl	8003bd4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d107      	bne.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f9ad 	bl	8003c6c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d12f      	bne.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d02a      	beq.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003934:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003942:	e001      	b.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4919      	ldr	r1, [pc, #100]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003950:	428b      	cmp	r3, r1
 8003952:	d101      	bne.n	8003958 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003954:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003956:	e001      	b.n	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003958:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003960:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f043 0202 	orr.w	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fc70 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d136      	bne.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d031      	beq.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800399c:	e001      	b.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800399e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4902      	ldr	r1, [pc, #8]	; (80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039aa:	428b      	cmp	r3, r1
 80039ac:	d106      	bne.n	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80039ae:	4b02      	ldr	r3, [pc, #8]	; (80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039b0:	e006      	b.n	80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80039b2:	bf00      	nop
 80039b4:	40003800 	.word	0x40003800
 80039b8:	40003400 	.word	0x40003400
 80039bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f043 0204 	orr.w	r2, r3, #4
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fc36 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039f0:	e000      	b.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039f2:	bf00      	nop
}
 80039f4:	bf00      	nop
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7fc fd5a 	bl	80004c4 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d155      	bne.n	8003ada <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3c:	d006      	beq.n	8003a4c <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11e      	bne.n	8003a8a <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a25      	ldr	r2, [pc, #148]	; (8003ae8 <I2SEx_TxRxDMACplt+0xd0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <I2SEx_TxRxDMACplt+0x42>
 8003a56:	4b25      	ldr	r3, [pc, #148]	; (8003aec <I2SEx_TxRxDMACplt+0xd4>)
 8003a58:	e001      	b.n	8003a5e <I2SEx_TxRxDMACplt+0x46>
 8003a5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4920      	ldr	r1, [pc, #128]	; (8003ae8 <I2SEx_TxRxDMACplt+0xd0>)
 8003a66:	428b      	cmp	r3, r1
 8003a68:	d101      	bne.n	8003a6e <I2SEx_TxRxDMACplt+0x56>
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <I2SEx_TxRxDMACplt+0xd4>)
 8003a6c:	e001      	b.n	8003a72 <I2SEx_TxRxDMACplt+0x5a>
 8003a6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0202 	bic.w	r2, r2, #2
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	e01d      	b.n	8003ac6 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <I2SEx_TxRxDMACplt+0xd0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <I2SEx_TxRxDMACplt+0x90>
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <I2SEx_TxRxDMACplt+0xd4>)
 8003aa6:	e001      	b.n	8003aac <I2SEx_TxRxDMACplt+0x94>
 8003aa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	490d      	ldr	r1, [pc, #52]	; (8003ae8 <I2SEx_TxRxDMACplt+0xd0>)
 8003ab4:	428b      	cmp	r3, r1
 8003ab6:	d101      	bne.n	8003abc <I2SEx_TxRxDMACplt+0xa4>
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <I2SEx_TxRxDMACplt+0xd4>)
 8003aba:	e001      	b.n	8003ac0 <I2SEx_TxRxDMACplt+0xa8>
 8003abc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac0:	f022 0202 	bic.w	r2, r2, #2
 8003ac4:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f7fc fd10 	bl	8000500 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40003800 	.word	0x40003800
 8003aec:	40003400 	.word	0x40003400

08003af0 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0203 	bic.w	r2, r2, #3
 8003b0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <I2SEx_TxRxDMAError+0x78>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d101      	bne.n	8003b1c <I2SEx_TxRxDMAError+0x2c>
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <I2SEx_TxRxDMAError+0x7c>)
 8003b1a:	e001      	b.n	8003b20 <I2SEx_TxRxDMAError+0x30>
 8003b1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4910      	ldr	r1, [pc, #64]	; (8003b68 <I2SEx_TxRxDMAError+0x78>)
 8003b28:	428b      	cmp	r3, r1
 8003b2a:	d101      	bne.n	8003b30 <I2SEx_TxRxDMAError+0x40>
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <I2SEx_TxRxDMAError+0x7c>)
 8003b2e:	e001      	b.n	8003b34 <I2SEx_TxRxDMAError+0x44>
 8003b30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b34:	f022 0203 	bic.w	r2, r2, #3
 8003b38:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	f043 0208 	orr.w	r2, r3, #8
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff fb7e 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40003800 	.word	0x40003800
 8003b6c:	40003400 	.word	0x40003400

08003b70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c99      	adds	r1, r3, #2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6251      	str	r1, [r2, #36]	; 0x24
 8003b82:	881a      	ldrh	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d113      	bne.n	8003bca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7fc fc9b 	bl	8000500 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	1c99      	adds	r1, r3, #2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6251      	str	r1, [r2, #36]	; 0x24
 8003be6:	8819      	ldrh	r1, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <I2SEx_TxISR_I2SExt+0x90>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d101      	bne.n	8003bf6 <I2SEx_TxISR_I2SExt+0x22>
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <I2SEx_TxISR_I2SExt+0x94>)
 8003bf4:	e001      	b.n	8003bfa <I2SEx_TxISR_I2SExt+0x26>
 8003bf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d121      	bne.n	8003c5a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a12      	ldr	r2, [pc, #72]	; (8003c64 <I2SEx_TxISR_I2SExt+0x90>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d101      	bne.n	8003c24 <I2SEx_TxISR_I2SExt+0x50>
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <I2SEx_TxISR_I2SExt+0x94>)
 8003c22:	e001      	b.n	8003c28 <I2SEx_TxISR_I2SExt+0x54>
 8003c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	490d      	ldr	r1, [pc, #52]	; (8003c64 <I2SEx_TxISR_I2SExt+0x90>)
 8003c30:	428b      	cmp	r3, r1
 8003c32:	d101      	bne.n	8003c38 <I2SEx_TxISR_I2SExt+0x64>
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <I2SEx_TxISR_I2SExt+0x94>)
 8003c36:	e001      	b.n	8003c3c <I2SEx_TxISR_I2SExt+0x68>
 8003c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fc fc53 	bl	8000500 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40003800 	.word	0x40003800
 8003c68:	40003400 	.word	0x40003400

08003c6c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68d8      	ldr	r0, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	1c99      	adds	r1, r3, #2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c84:	b282      	uxth	r2, r0
 8003c86:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d113      	bne.n	8003cc8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fc fc1c 	bl	8000500 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <I2SEx_RxISR_I2SExt+0x90>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <I2SEx_RxISR_I2SExt+0x16>
 8003ce2:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <I2SEx_RxISR_I2SExt+0x94>)
 8003ce4:	e001      	b.n	8003cea <I2SEx_RxISR_I2SExt+0x1a>
 8003ce6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cea:	68d8      	ldr	r0, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	1c99      	adds	r1, r3, #2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cf6:	b282      	uxth	r2, r0
 8003cf8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d121      	bne.n	8003d56 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <I2SEx_RxISR_I2SExt+0x90>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <I2SEx_RxISR_I2SExt+0x50>
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <I2SEx_RxISR_I2SExt+0x94>)
 8003d1e:	e001      	b.n	8003d24 <I2SEx_RxISR_I2SExt+0x54>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	490d      	ldr	r1, [pc, #52]	; (8003d60 <I2SEx_RxISR_I2SExt+0x90>)
 8003d2c:	428b      	cmp	r3, r1
 8003d2e:	d101      	bne.n	8003d34 <I2SEx_RxISR_I2SExt+0x64>
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <I2SEx_RxISR_I2SExt+0x94>)
 8003d32:	e001      	b.n	8003d38 <I2SEx_RxISR_I2SExt+0x68>
 8003d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d3c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fc fbd5 	bl	8000500 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40003800 	.word	0x40003800
 8003d64:	40003400 	.word	0x40003400

08003d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e267      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d075      	beq.n	8003e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d86:	4b88      	ldr	r3, [pc, #544]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d00c      	beq.n	8003dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d92:	4b85      	ldr	r3, [pc, #532]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d112      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d9e:	4b82      	ldr	r3, [pc, #520]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	4b7e      	ldr	r3, [pc, #504]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d05b      	beq.n	8003e70 <HAL_RCC_OscConfig+0x108>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d157      	bne.n	8003e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e242      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dcc:	d106      	bne.n	8003ddc <HAL_RCC_OscConfig+0x74>
 8003dce:	4b76      	ldr	r3, [pc, #472]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a75      	ldr	r2, [pc, #468]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e01d      	b.n	8003e18 <HAL_RCC_OscConfig+0xb0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x98>
 8003de6:	4b70      	ldr	r3, [pc, #448]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a6f      	ldr	r2, [pc, #444]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b6d      	ldr	r3, [pc, #436]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a6c      	ldr	r2, [pc, #432]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0xb0>
 8003e00:	4b69      	ldr	r3, [pc, #420]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a68      	ldr	r2, [pc, #416]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b66      	ldr	r3, [pc, #408]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a65      	ldr	r2, [pc, #404]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d013      	beq.n	8003e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fd fb40 	bl	80014a4 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e28:	f7fd fb3c 	bl	80014a4 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	; 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e207      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b5b      	ldr	r3, [pc, #364]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0xc0>
 8003e46:	e014      	b.n	8003e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fd fb2c 	bl	80014a4 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e50:	f7fd fb28 	bl	80014a4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	; 0x64
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e1f3      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e62:	4b51      	ldr	r3, [pc, #324]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0xe8>
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d063      	beq.n	8003f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e7e:	4b4a      	ldr	r3, [pc, #296]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8a:	4b47      	ldr	r3, [pc, #284]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d11c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e96:	4b44      	ldr	r3, [pc, #272]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d116      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_RCC_OscConfig+0x152>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d001      	beq.n	8003eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e1c7      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eba:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4937      	ldr	r1, [pc, #220]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	e03a      	b.n	8003f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed8:	4b34      	ldr	r3, [pc, #208]	; (8003fac <HAL_RCC_OscConfig+0x244>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fd fae1 	bl	80014a4 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee6:	f7fd fadd 	bl	80014a4 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e1a8      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f04:	4b28      	ldr	r3, [pc, #160]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4925      	ldr	r1, [pc, #148]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
 8003f18:	e015      	b.n	8003f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1a:	4b24      	ldr	r3, [pc, #144]	; (8003fac <HAL_RCC_OscConfig+0x244>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd fac0 	bl	80014a4 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f28:	f7fd fabc 	bl	80014a4 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e187      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d036      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d016      	beq.n	8003f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_RCC_OscConfig+0x248>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fd faa0 	bl	80014a4 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f68:	f7fd fa9c 	bl	80014a4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e167      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x200>
 8003f86:	e01b      	b.n	8003fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HAL_RCC_OscConfig+0x248>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8e:	f7fd fa89 	bl	80014a4 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f94:	e00e      	b.n	8003fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f96:	f7fd fa85 	bl	80014a4 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d907      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e150      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	42470000 	.word	0x42470000
 8003fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb4:	4b88      	ldr	r3, [pc, #544]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1ea      	bne.n	8003f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8097 	beq.w	80040fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd2:	4b81      	ldr	r3, [pc, #516]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10f      	bne.n	8003ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	4b7d      	ldr	r3, [pc, #500]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4a7c      	ldr	r2, [pc, #496]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	; 0x40
 8003fee:	4b7a      	ldr	r3, [pc, #488]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffe:	4b77      	ldr	r3, [pc, #476]	; (80041dc <HAL_RCC_OscConfig+0x474>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d118      	bne.n	800403c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800400a:	4b74      	ldr	r3, [pc, #464]	; (80041dc <HAL_RCC_OscConfig+0x474>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a73      	ldr	r2, [pc, #460]	; (80041dc <HAL_RCC_OscConfig+0x474>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004016:	f7fd fa45 	bl	80014a4 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401e:	f7fd fa41 	bl	80014a4 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e10c      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	4b6a      	ldr	r3, [pc, #424]	; (80041dc <HAL_RCC_OscConfig+0x474>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x2ea>
 8004044:	4b64      	ldr	r3, [pc, #400]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a63      	ldr	r2, [pc, #396]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	; 0x70
 8004050:	e01c      	b.n	800408c <HAL_RCC_OscConfig+0x324>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b05      	cmp	r3, #5
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0x30c>
 800405a:	4b5f      	ldr	r3, [pc, #380]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	4a5e      	ldr	r2, [pc, #376]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	6713      	str	r3, [r2, #112]	; 0x70
 8004066:	4b5c      	ldr	r3, [pc, #368]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	4a5b      	ldr	r2, [pc, #364]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6713      	str	r3, [r2, #112]	; 0x70
 8004072:	e00b      	b.n	800408c <HAL_RCC_OscConfig+0x324>
 8004074:	4b58      	ldr	r3, [pc, #352]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	4a57      	ldr	r2, [pc, #348]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	6713      	str	r3, [r2, #112]	; 0x70
 8004080:	4b55      	ldr	r3, [pc, #340]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	4a54      	ldr	r2, [pc, #336]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8004086:	f023 0304 	bic.w	r3, r3, #4
 800408a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd fa06 	bl	80014a4 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fd fa02 	bl	80014a4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0cb      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b2:	4b49      	ldr	r3, [pc, #292]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ee      	beq.n	800409c <HAL_RCC_OscConfig+0x334>
 80040be:	e014      	b.n	80040ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c0:	f7fd f9f0 	bl	80014a4 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c6:	e00a      	b.n	80040de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c8:	f7fd f9ec 	bl	80014a4 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0b5      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040de:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1ee      	bne.n	80040c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d105      	bne.n	80040fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f0:	4b39      	ldr	r3, [pc, #228]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	4a38      	ldr	r2, [pc, #224]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 80040f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80a1 	beq.w	8004248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004106:	4b34      	ldr	r3, [pc, #208]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b08      	cmp	r3, #8
 8004110:	d05c      	beq.n	80041cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d141      	bne.n	800419e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411a:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <HAL_RCC_OscConfig+0x478>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fd f9c0 	bl	80014a4 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fd f9bc 	bl	80014a4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e087      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	019b      	lsls	r3, r3, #6
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	3b01      	subs	r3, #1
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	491b      	ldr	r1, [pc, #108]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 800416c:	4313      	orrs	r3, r2
 800416e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <HAL_RCC_OscConfig+0x478>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004176:	f7fd f995 	bl	80014a4 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417e:	f7fd f991 	bl	80014a4 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e05c      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004190:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x416>
 800419c:	e054      	b.n	8004248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <HAL_RCC_OscConfig+0x478>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7fd f97e 	bl	80014a4 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ac:	f7fd f97a 	bl	80014a4 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e045      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <HAL_RCC_OscConfig+0x470>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x444>
 80041ca:	e03d      	b.n	8004248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e038      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40007000 	.word	0x40007000
 80041e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041e4:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_RCC_OscConfig+0x4ec>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d028      	beq.n	8004244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d121      	bne.n	8004244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d11a      	bne.n	8004244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004214:	4013      	ands	r3, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800421a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800421c:	4293      	cmp	r3, r2
 800421e:	d111      	bne.n	8004244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	085b      	lsrs	r3, r3, #1
 800422c:	3b01      	subs	r3, #1
 800422e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d107      	bne.n	8004244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800

08004258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0cc      	b.n	8004406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800426c:	4b68      	ldr	r3, [pc, #416]	; (8004410 <HAL_RCC_ClockConfig+0x1b8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d90c      	bls.n	8004294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b65      	ldr	r3, [pc, #404]	; (8004410 <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b63      	ldr	r3, [pc, #396]	; (8004410 <HAL_RCC_ClockConfig+0x1b8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0b8      	b.n	8004406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d020      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042ac:	4b59      	ldr	r3, [pc, #356]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4a58      	ldr	r2, [pc, #352]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c4:	4b53      	ldr	r3, [pc, #332]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	4a52      	ldr	r2, [pc, #328]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d0:	4b50      	ldr	r3, [pc, #320]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	494d      	ldr	r1, [pc, #308]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d044      	beq.n	8004378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	4b47      	ldr	r3, [pc, #284]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d119      	bne.n	8004336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e07f      	b.n	8004406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d003      	beq.n	8004316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004312:	2b03      	cmp	r3, #3
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004316:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e06f      	b.n	8004406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004326:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e067      	b.n	8004406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004336:	4b37      	ldr	r3, [pc, #220]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f023 0203 	bic.w	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4934      	ldr	r1, [pc, #208]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	4313      	orrs	r3, r2
 8004346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004348:	f7fd f8ac 	bl	80014a4 <HAL_GetTick>
 800434c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	e00a      	b.n	8004366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004350:	f7fd f8a8 	bl	80014a4 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	; 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e04f      	b.n	8004406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004366:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 020c 	and.w	r2, r3, #12
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	429a      	cmp	r2, r3
 8004376:	d1eb      	bne.n	8004350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004378:	4b25      	ldr	r3, [pc, #148]	; (8004410 <HAL_RCC_ClockConfig+0x1b8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d20c      	bcs.n	80043a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b22      	ldr	r3, [pc, #136]	; (8004410 <HAL_RCC_ClockConfig+0x1b8>)
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438e:	4b20      	ldr	r3, [pc, #128]	; (8004410 <HAL_RCC_ClockConfig+0x1b8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e032      	b.n	8004406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4916      	ldr	r1, [pc, #88]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	490e      	ldr	r1, [pc, #56]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043de:	f000 f821 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 80043e2:	4602      	mov	r2, r0
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	490a      	ldr	r1, [pc, #40]	; (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	5ccb      	ldrb	r3, [r1, r3]
 80043f2:	fa22 f303 	lsr.w	r3, r2, r3
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_RCC_ClockConfig+0x1c8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd f80c 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40023c00 	.word	0x40023c00
 8004414:	40023800 	.word	0x40023800
 8004418:	08005790 	.word	0x08005790
 800441c:	20000008 	.word	0x20000008
 8004420:	2000000c 	.word	0x2000000c

08004424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004428:	b090      	sub	sp, #64	; 0x40
 800442a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	637b      	str	r3, [r7, #52]	; 0x34
 8004430:	2300      	movs	r3, #0
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004434:	2300      	movs	r3, #0
 8004436:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800443c:	4b59      	ldr	r3, [pc, #356]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b08      	cmp	r3, #8
 8004446:	d00d      	beq.n	8004464 <HAL_RCC_GetSysClockFreq+0x40>
 8004448:	2b08      	cmp	r3, #8
 800444a:	f200 80a1 	bhi.w	8004590 <HAL_RCC_GetSysClockFreq+0x16c>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x34>
 8004452:	2b04      	cmp	r3, #4
 8004454:	d003      	beq.n	800445e <HAL_RCC_GetSysClockFreq+0x3a>
 8004456:	e09b      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004458:	4b53      	ldr	r3, [pc, #332]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800445a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800445c:	e09b      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800445e:	4b53      	ldr	r3, [pc, #332]	; (80045ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004462:	e098      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004464:	4b4f      	ldr	r3, [pc, #316]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800446c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800446e:	4b4d      	ldr	r3, [pc, #308]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d028      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800447a:	4b4a      	ldr	r3, [pc, #296]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	099b      	lsrs	r3, r3, #6
 8004480:	2200      	movs	r2, #0
 8004482:	623b      	str	r3, [r7, #32]
 8004484:	627a      	str	r2, [r7, #36]	; 0x24
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800448c:	2100      	movs	r1, #0
 800448e:	4b47      	ldr	r3, [pc, #284]	; (80045ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004490:	fb03 f201 	mul.w	r2, r3, r1
 8004494:	2300      	movs	r3, #0
 8004496:	fb00 f303 	mul.w	r3, r0, r3
 800449a:	4413      	add	r3, r2
 800449c:	4a43      	ldr	r2, [pc, #268]	; (80045ac <HAL_RCC_GetSysClockFreq+0x188>)
 800449e:	fba0 1202 	umull	r1, r2, r0, r2
 80044a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a4:	460a      	mov	r2, r1
 80044a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80044a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044aa:	4413      	add	r3, r2
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b0:	2200      	movs	r2, #0
 80044b2:	61bb      	str	r3, [r7, #24]
 80044b4:	61fa      	str	r2, [r7, #28]
 80044b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044be:	f7fb fe83 	bl	80001c8 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4613      	mov	r3, r2
 80044c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ca:	e053      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044cc:	4b35      	ldr	r3, [pc, #212]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	099b      	lsrs	r3, r3, #6
 80044d2:	2200      	movs	r2, #0
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	617a      	str	r2, [r7, #20]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044de:	f04f 0b00 	mov.w	fp, #0
 80044e2:	4652      	mov	r2, sl
 80044e4:	465b      	mov	r3, fp
 80044e6:	f04f 0000 	mov.w	r0, #0
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	0159      	lsls	r1, r3, #5
 80044f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f4:	0150      	lsls	r0, r2, #5
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	ebb2 080a 	subs.w	r8, r2, sl
 80044fe:	eb63 090b 	sbc.w	r9, r3, fp
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800450e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004512:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004516:	ebb2 0408 	subs.w	r4, r2, r8
 800451a:	eb63 0509 	sbc.w	r5, r3, r9
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	00eb      	lsls	r3, r5, #3
 8004528:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800452c:	00e2      	lsls	r2, r4, #3
 800452e:	4614      	mov	r4, r2
 8004530:	461d      	mov	r5, r3
 8004532:	eb14 030a 	adds.w	r3, r4, sl
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	eb45 030b 	adc.w	r3, r5, fp
 800453c:	607b      	str	r3, [r7, #4]
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800454a:	4629      	mov	r1, r5
 800454c:	028b      	lsls	r3, r1, #10
 800454e:	4621      	mov	r1, r4
 8004550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004554:	4621      	mov	r1, r4
 8004556:	028a      	lsls	r2, r1, #10
 8004558:	4610      	mov	r0, r2
 800455a:	4619      	mov	r1, r3
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455e:	2200      	movs	r2, #0
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	60fa      	str	r2, [r7, #12]
 8004564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004568:	f7fb fe2e 	bl	80001c8 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4613      	mov	r3, r2
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	0c1b      	lsrs	r3, r3, #16
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	3301      	adds	r3, #1
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004584:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800458e:	e002      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004592:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004598:	4618      	mov	r0, r3
 800459a:	3740      	adds	r7, #64	; 0x40
 800459c:	46bd      	mov	sp, r7
 800459e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045a2:	bf00      	nop
 80045a4:	40023800 	.word	0x40023800
 80045a8:	00f42400 	.word	0x00f42400
 80045ac:	018cba80 	.word	0x018cba80

080045b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b4:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045b6:	681b      	ldr	r3, [r3, #0]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000008 	.word	0x20000008

080045c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045cc:	f7ff fff0 	bl	80045b0 <HAL_RCC_GetHCLKFreq>
 80045d0:	4602      	mov	r2, r0
 80045d2:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	0a9b      	lsrs	r3, r3, #10
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	4903      	ldr	r1, [pc, #12]	; (80045ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80045de:	5ccb      	ldrb	r3, [r1, r3]
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40023800 	.word	0x40023800
 80045ec:	080057a0 	.word	0x080057a0

080045f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045f4:	f7ff ffdc 	bl	80045b0 <HAL_RCC_GetHCLKFreq>
 80045f8:	4602      	mov	r2, r0
 80045fa:	4b05      	ldr	r3, [pc, #20]	; (8004610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	0b5b      	lsrs	r3, r3, #13
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	4903      	ldr	r1, [pc, #12]	; (8004614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004606:	5ccb      	ldrb	r3, [r1, r3]
 8004608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800460c:	4618      	mov	r0, r3
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40023800 	.word	0x40023800
 8004614:	080057a0 	.word	0x080057a0

08004618 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d105      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800463c:	2b00      	cmp	r3, #0
 800463e:	d035      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004640:	4b62      	ldr	r3, [pc, #392]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004646:	f7fc ff2d 	bl	80014a4 <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800464e:	f7fc ff29 	bl	80014a4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0b0      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004660:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	019a      	lsls	r2, r3, #6
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	071b      	lsls	r3, r3, #28
 8004678:	4955      	ldr	r1, [pc, #340]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004680:	4b52      	ldr	r3, [pc, #328]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004686:	f7fc ff0d 	bl	80014a4 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800468e:	f7fc ff09 	bl	80014a4 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e090      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8083 	beq.w	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4b44      	ldr	r3, [pc, #272]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	4a43      	ldr	r2, [pc, #268]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046d6:	4b3f      	ldr	r3, [pc, #252]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3e      	ldr	r2, [pc, #248]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046e2:	f7fc fedf 	bl	80014a4 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fc fedb 	bl	80014a4 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e062      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046fc:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004708:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004710:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02f      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	429a      	cmp	r2, r3
 8004724:	d028      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004726:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004730:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004736:	4b28      	ldr	r3, [pc, #160]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800473c:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004742:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d114      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800474e:	f7fc fea9 	bl	80014a4 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fc fea5 	bl	80014a4 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e02a      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ee      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004784:	d10d      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479a:	490d      	ldr	r1, [pc, #52]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]
 80047a0:	e005      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ac:	6093      	str	r3, [r2, #8]
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ba:	4905      	ldr	r1, [pc, #20]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	42470068 	.word	0x42470068
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40007000 	.word	0x40007000
 80047d8:	42470e40 	.word	0x42470e40

080047dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d13e      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d12f      	bne.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004810:	4b1e      	ldr	r3, [pc, #120]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004812:	617b      	str	r3, [r7, #20]
          break;
 8004814:	e02f      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004816:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004822:	d108      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800482c:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800482e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	e007      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484c:	099b      	lsrs	r3, r3, #6
 800484e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	fb02 f303 	mul.w	r3, r2, r3
 8004858:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800485c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004860:	0f1b      	lsrs	r3, r3, #28
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
          break;
 800486e:	e002      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
          break;
 8004874:	bf00      	nop
        }
      }
      break;
 8004876:	bf00      	nop
    }
  }
  return frequency;
 8004878:	697b      	ldr	r3, [r7, #20]
}
 800487a:	4618      	mov	r0, r3
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800
 800488c:	00bb8000 	.word	0x00bb8000
 8004890:	018cba80 	.word	0x018cba80
 8004894:	00f42400 	.word	0x00f42400

08004898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e041      	b.n	800492e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fc fc6e 	bl	80011a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f000 fa96 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d001      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e04e      	b.n	80049ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a23      	ldr	r2, [pc, #140]	; (80049fc <HAL_TIM_Base_Start_IT+0xc4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497a:	d01d      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1f      	ldr	r2, [pc, #124]	; (8004a00 <HAL_TIM_Base_Start_IT+0xc8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d018      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1e      	ldr	r2, [pc, #120]	; (8004a04 <HAL_TIM_Base_Start_IT+0xcc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1c      	ldr	r2, [pc, #112]	; (8004a08 <HAL_TIM_Base_Start_IT+0xd0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1b      	ldr	r2, [pc, #108]	; (8004a0c <HAL_TIM_Base_Start_IT+0xd4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <HAL_TIM_Base_Start_IT+0xd8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <HAL_TIM_Base_Start_IT+0xdc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d111      	bne.n	80049dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b06      	cmp	r3, #6
 80049c8:	d010      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049da:	e007      	b.n	80049ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40010400 	.word	0x40010400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40001800 	.word	0x40001800

08004a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d122      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d11b      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0202 	mvn.w	r2, #2
 8004a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f9b5 	bl	8004dca <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f9a7 	bl	8004db6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f9b8 	bl	8004dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d122      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d11b      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0204 	mvn.w	r2, #4
 8004a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f98b 	bl	8004dca <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f97d 	bl	8004db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f98e 	bl	8004dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d122      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d11b      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0208 	mvn.w	r2, #8
 8004aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2204      	movs	r2, #4
 8004af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f961 	bl	8004dca <HAL_TIM_IC_CaptureCallback>
 8004b08:	e005      	b.n	8004b16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f953 	bl	8004db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f964 	bl	8004dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d122      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d11b      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0210 	mvn.w	r2, #16
 8004b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2208      	movs	r2, #8
 8004b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f937 	bl	8004dca <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f929 	bl	8004db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f93a 	bl	8004dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d10e      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d107      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0201 	mvn.w	r2, #1
 8004b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fc f856 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba6:	2b80      	cmp	r3, #128	; 0x80
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	2b80      	cmp	r3, #128	; 0x80
 8004bb6:	d107      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fae0 	bl	8005188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d107      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8ff 	bl	8004df2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d10e      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0220 	mvn.w	r2, #32
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 faaa 	bl	8005174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_TIM_ConfigClockSource+0x1c>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e0b4      	b.n	8004dae <HAL_TIM_ConfigClockSource+0x186>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7c:	d03e      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0xd4>
 8004c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c82:	f200 8087 	bhi.w	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8a:	f000 8086 	beq.w	8004d9a <HAL_TIM_ConfigClockSource+0x172>
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c92:	d87f      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b70      	cmp	r3, #112	; 0x70
 8004c96:	d01a      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0xa6>
 8004c98:	2b70      	cmp	r3, #112	; 0x70
 8004c9a:	d87b      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b60      	cmp	r3, #96	; 0x60
 8004c9e:	d050      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x11a>
 8004ca0:	2b60      	cmp	r3, #96	; 0x60
 8004ca2:	d877      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b50      	cmp	r3, #80	; 0x50
 8004ca6:	d03c      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0xfa>
 8004ca8:	2b50      	cmp	r3, #80	; 0x50
 8004caa:	d873      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d058      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x13a>
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d86f      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b30      	cmp	r3, #48	; 0x30
 8004cb6:	d064      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x15a>
 8004cb8:	2b30      	cmp	r3, #48	; 0x30
 8004cba:	d86b      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d060      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d867      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d05c      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d05a      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x15a>
 8004ccc:	e062      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6899      	ldr	r1, [r3, #8]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f000 f9ad 	bl	800503c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	609a      	str	r2, [r3, #8]
      break;
 8004cfa:	e04f      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	6899      	ldr	r1, [r3, #8]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f000 f996 	bl	800503c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d1e:	609a      	str	r2, [r3, #8]
      break;
 8004d20:	e03c      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 f90a 	bl	8004f48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2150      	movs	r1, #80	; 0x50
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f963 	bl	8005006 <TIM_ITRx_SetConfig>
      break;
 8004d40:	e02c      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f000 f929 	bl	8004fa6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2160      	movs	r1, #96	; 0x60
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 f953 	bl	8005006 <TIM_ITRx_SetConfig>
      break;
 8004d60:	e01c      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6859      	ldr	r1, [r3, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f000 f8ea 	bl	8004f48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2140      	movs	r1, #64	; 0x40
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 f943 	bl	8005006 <TIM_ITRx_SetConfig>
      break;
 8004d80:	e00c      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f000 f93a 	bl	8005006 <TIM_ITRx_SetConfig>
      break;
 8004d92:	e003      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      break;
 8004d98:	e000      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a40      	ldr	r2, [pc, #256]	; (8004f1c <TIM_Base_SetConfig+0x114>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d013      	beq.n	8004e48 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e26:	d00f      	beq.n	8004e48 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3d      	ldr	r2, [pc, #244]	; (8004f20 <TIM_Base_SetConfig+0x118>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00b      	beq.n	8004e48 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a3c      	ldr	r2, [pc, #240]	; (8004f24 <TIM_Base_SetConfig+0x11c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d007      	beq.n	8004e48 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a3b      	ldr	r2, [pc, #236]	; (8004f28 <TIM_Base_SetConfig+0x120>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3a      	ldr	r2, [pc, #232]	; (8004f2c <TIM_Base_SetConfig+0x124>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d108      	bne.n	8004e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2f      	ldr	r2, [pc, #188]	; (8004f1c <TIM_Base_SetConfig+0x114>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d02b      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e68:	d027      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <TIM_Base_SetConfig+0x118>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d023      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <TIM_Base_SetConfig+0x11c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01f      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2a      	ldr	r2, [pc, #168]	; (8004f28 <TIM_Base_SetConfig+0x120>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d01b      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a29      	ldr	r2, [pc, #164]	; (8004f2c <TIM_Base_SetConfig+0x124>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d017      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a28      	ldr	r2, [pc, #160]	; (8004f30 <TIM_Base_SetConfig+0x128>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a27      	ldr	r2, [pc, #156]	; (8004f34 <TIM_Base_SetConfig+0x12c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00f      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a26      	ldr	r2, [pc, #152]	; (8004f38 <TIM_Base_SetConfig+0x130>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a25      	ldr	r2, [pc, #148]	; (8004f3c <TIM_Base_SetConfig+0x134>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a24      	ldr	r2, [pc, #144]	; (8004f40 <TIM_Base_SetConfig+0x138>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a23      	ldr	r2, [pc, #140]	; (8004f44 <TIM_Base_SetConfig+0x13c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <TIM_Base_SetConfig+0x114>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_Base_SetConfig+0xf8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a0c      	ldr	r2, [pc, #48]	; (8004f2c <TIM_Base_SetConfig+0x124>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d103      	bne.n	8004f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	615a      	str	r2, [r3, #20]
}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	40000c00 	.word	0x40000c00
 8004f2c:	40010400 	.word	0x40010400
 8004f30:	40014000 	.word	0x40014000
 8004f34:	40014400 	.word	0x40014400
 8004f38:	40014800 	.word	0x40014800
 8004f3c:	40001800 	.word	0x40001800
 8004f40:	40001c00 	.word	0x40001c00
 8004f44:	40002000 	.word	0x40002000

08004f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0201 	bic.w	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 030a 	bic.w	r3, r3, #10
 8004f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b087      	sub	sp, #28
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f023 0210 	bic.w	r2, r3, #16
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	031b      	lsls	r3, r3, #12
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fe2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	621a      	str	r2, [r3, #32]
}
 8004ffa:	bf00      	nop
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	f043 0307 	orr.w	r3, r3, #7
 8005028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	609a      	str	r2, [r3, #8]
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005056:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	021a      	lsls	r2, r3, #8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	431a      	orrs	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4313      	orrs	r3, r2
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	609a      	str	r2, [r3, #8]
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005090:	2302      	movs	r3, #2
 8005092:	e05a      	b.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a21      	ldr	r2, [pc, #132]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d022      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e0:	d01d      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1d      	ldr	r2, [pc, #116]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d018      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00e      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a17      	ldr	r2, [pc, #92]	; (800516c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a15      	ldr	r2, [pc, #84]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d10c      	bne.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	4313      	orrs	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40010000 	.word	0x40010000
 800515c:	40000400 	.word	0x40000400
 8005160:	40000800 	.word	0x40000800
 8005164:	40000c00 	.word	0x40000c00
 8005168:	40010400 	.word	0x40010400
 800516c:	40014000 	.word	0x40014000
 8005170:	40001800 	.word	0x40001800

08005174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e03f      	b.n	800522e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fc f828 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2224      	movs	r2, #36	; 0x24
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f829 	bl	8005238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695a      	ldr	r2, [r3, #20]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800523c:	b0c0      	sub	sp, #256	; 0x100
 800523e:	af00      	add	r7, sp, #0
 8005240:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	68d9      	ldr	r1, [r3, #12]
 8005256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	ea40 0301 	orr.w	r3, r0, r1
 8005260:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	431a      	orrs	r2, r3
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	431a      	orrs	r2, r3
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005290:	f021 010c 	bic.w	r1, r1, #12
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800529e:	430b      	orrs	r3, r1
 80052a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b2:	6999      	ldr	r1, [r3, #24]
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	ea40 0301 	orr.w	r3, r0, r1
 80052be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b8f      	ldr	r3, [pc, #572]	; (8005504 <UART_SetConfig+0x2cc>)
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d005      	beq.n	80052d8 <UART_SetConfig+0xa0>
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4b8d      	ldr	r3, [pc, #564]	; (8005508 <UART_SetConfig+0x2d0>)
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d104      	bne.n	80052e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052d8:	f7ff f98a 	bl	80045f0 <HAL_RCC_GetPCLK2Freq>
 80052dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052e0:	e003      	b.n	80052ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052e2:	f7ff f971 	bl	80045c8 <HAL_RCC_GetPCLK1Freq>
 80052e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f4:	f040 810c 	bne.w	8005510 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005302:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005306:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800530a:	4622      	mov	r2, r4
 800530c:	462b      	mov	r3, r5
 800530e:	1891      	adds	r1, r2, r2
 8005310:	65b9      	str	r1, [r7, #88]	; 0x58
 8005312:	415b      	adcs	r3, r3
 8005314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005316:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800531a:	4621      	mov	r1, r4
 800531c:	eb12 0801 	adds.w	r8, r2, r1
 8005320:	4629      	mov	r1, r5
 8005322:	eb43 0901 	adc.w	r9, r3, r1
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800533a:	4690      	mov	r8, r2
 800533c:	4699      	mov	r9, r3
 800533e:	4623      	mov	r3, r4
 8005340:	eb18 0303 	adds.w	r3, r8, r3
 8005344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005348:	462b      	mov	r3, r5
 800534a:	eb49 0303 	adc.w	r3, r9, r3
 800534e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800535e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005366:	460b      	mov	r3, r1
 8005368:	18db      	adds	r3, r3, r3
 800536a:	653b      	str	r3, [r7, #80]	; 0x50
 800536c:	4613      	mov	r3, r2
 800536e:	eb42 0303 	adc.w	r3, r2, r3
 8005372:	657b      	str	r3, [r7, #84]	; 0x54
 8005374:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005378:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800537c:	f7fa ff24 	bl	80001c8 <__aeabi_uldivmod>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4b61      	ldr	r3, [pc, #388]	; (800550c <UART_SetConfig+0x2d4>)
 8005386:	fba3 2302 	umull	r2, r3, r3, r2
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	011c      	lsls	r4, r3, #4
 800538e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005392:	2200      	movs	r2, #0
 8005394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005398:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800539c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053a0:	4642      	mov	r2, r8
 80053a2:	464b      	mov	r3, r9
 80053a4:	1891      	adds	r1, r2, r2
 80053a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80053a8:	415b      	adcs	r3, r3
 80053aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053b0:	4641      	mov	r1, r8
 80053b2:	eb12 0a01 	adds.w	sl, r2, r1
 80053b6:	4649      	mov	r1, r9
 80053b8:	eb43 0b01 	adc.w	fp, r3, r1
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053d0:	4692      	mov	sl, r2
 80053d2:	469b      	mov	fp, r3
 80053d4:	4643      	mov	r3, r8
 80053d6:	eb1a 0303 	adds.w	r3, sl, r3
 80053da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053de:	464b      	mov	r3, r9
 80053e0:	eb4b 0303 	adc.w	r3, fp, r3
 80053e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053fc:	460b      	mov	r3, r1
 80053fe:	18db      	adds	r3, r3, r3
 8005400:	643b      	str	r3, [r7, #64]	; 0x40
 8005402:	4613      	mov	r3, r2
 8005404:	eb42 0303 	adc.w	r3, r2, r3
 8005408:	647b      	str	r3, [r7, #68]	; 0x44
 800540a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800540e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005412:	f7fa fed9 	bl	80001c8 <__aeabi_uldivmod>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4611      	mov	r1, r2
 800541c:	4b3b      	ldr	r3, [pc, #236]	; (800550c <UART_SetConfig+0x2d4>)
 800541e:	fba3 2301 	umull	r2, r3, r3, r1
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	2264      	movs	r2, #100	; 0x64
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	1acb      	subs	r3, r1, r3
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005432:	4b36      	ldr	r3, [pc, #216]	; (800550c <UART_SetConfig+0x2d4>)
 8005434:	fba3 2302 	umull	r2, r3, r3, r2
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005440:	441c      	add	r4, r3
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005446:	2200      	movs	r2, #0
 8005448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800544c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005450:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005454:	4642      	mov	r2, r8
 8005456:	464b      	mov	r3, r9
 8005458:	1891      	adds	r1, r2, r2
 800545a:	63b9      	str	r1, [r7, #56]	; 0x38
 800545c:	415b      	adcs	r3, r3
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005464:	4641      	mov	r1, r8
 8005466:	1851      	adds	r1, r2, r1
 8005468:	6339      	str	r1, [r7, #48]	; 0x30
 800546a:	4649      	mov	r1, r9
 800546c:	414b      	adcs	r3, r1
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800547c:	4659      	mov	r1, fp
 800547e:	00cb      	lsls	r3, r1, #3
 8005480:	4651      	mov	r1, sl
 8005482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005486:	4651      	mov	r1, sl
 8005488:	00ca      	lsls	r2, r1, #3
 800548a:	4610      	mov	r0, r2
 800548c:	4619      	mov	r1, r3
 800548e:	4603      	mov	r3, r0
 8005490:	4642      	mov	r2, r8
 8005492:	189b      	adds	r3, r3, r2
 8005494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005498:	464b      	mov	r3, r9
 800549a:	460a      	mov	r2, r1
 800549c:	eb42 0303 	adc.w	r3, r2, r3
 80054a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054b8:	460b      	mov	r3, r1
 80054ba:	18db      	adds	r3, r3, r3
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054be:	4613      	mov	r3, r2
 80054c0:	eb42 0303 	adc.w	r3, r2, r3
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054ce:	f7fa fe7b 	bl	80001c8 <__aeabi_uldivmod>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <UART_SetConfig+0x2d4>)
 80054d8:	fba3 1302 	umull	r1, r3, r3, r2
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	2164      	movs	r1, #100	; 0x64
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	3332      	adds	r3, #50	; 0x32
 80054ea:	4a08      	ldr	r2, [pc, #32]	; (800550c <UART_SetConfig+0x2d4>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	f003 0207 	and.w	r2, r3, #7
 80054f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4422      	add	r2, r4
 80054fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005500:	e106      	b.n	8005710 <UART_SetConfig+0x4d8>
 8005502:	bf00      	nop
 8005504:	40011000 	.word	0x40011000
 8005508:	40011400 	.word	0x40011400
 800550c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005514:	2200      	movs	r2, #0
 8005516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800551a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800551e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005522:	4642      	mov	r2, r8
 8005524:	464b      	mov	r3, r9
 8005526:	1891      	adds	r1, r2, r2
 8005528:	6239      	str	r1, [r7, #32]
 800552a:	415b      	adcs	r3, r3
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
 800552e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005532:	4641      	mov	r1, r8
 8005534:	1854      	adds	r4, r2, r1
 8005536:	4649      	mov	r1, r9
 8005538:	eb43 0501 	adc.w	r5, r3, r1
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	00eb      	lsls	r3, r5, #3
 8005546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800554a:	00e2      	lsls	r2, r4, #3
 800554c:	4614      	mov	r4, r2
 800554e:	461d      	mov	r5, r3
 8005550:	4643      	mov	r3, r8
 8005552:	18e3      	adds	r3, r4, r3
 8005554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005558:	464b      	mov	r3, r9
 800555a:	eb45 0303 	adc.w	r3, r5, r3
 800555e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800556e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800557e:	4629      	mov	r1, r5
 8005580:	008b      	lsls	r3, r1, #2
 8005582:	4621      	mov	r1, r4
 8005584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005588:	4621      	mov	r1, r4
 800558a:	008a      	lsls	r2, r1, #2
 800558c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005590:	f7fa fe1a 	bl	80001c8 <__aeabi_uldivmod>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4b60      	ldr	r3, [pc, #384]	; (800571c <UART_SetConfig+0x4e4>)
 800559a:	fba3 2302 	umull	r2, r3, r3, r2
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	011c      	lsls	r4, r3, #4
 80055a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055b4:	4642      	mov	r2, r8
 80055b6:	464b      	mov	r3, r9
 80055b8:	1891      	adds	r1, r2, r2
 80055ba:	61b9      	str	r1, [r7, #24]
 80055bc:	415b      	adcs	r3, r3
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c4:	4641      	mov	r1, r8
 80055c6:	1851      	adds	r1, r2, r1
 80055c8:	6139      	str	r1, [r7, #16]
 80055ca:	4649      	mov	r1, r9
 80055cc:	414b      	adcs	r3, r1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055dc:	4659      	mov	r1, fp
 80055de:	00cb      	lsls	r3, r1, #3
 80055e0:	4651      	mov	r1, sl
 80055e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e6:	4651      	mov	r1, sl
 80055e8:	00ca      	lsls	r2, r1, #3
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	4642      	mov	r2, r8
 80055f2:	189b      	adds	r3, r3, r2
 80055f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055f8:	464b      	mov	r3, r9
 80055fa:	460a      	mov	r2, r1
 80055fc:	eb42 0303 	adc.w	r3, r2, r3
 8005600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	67bb      	str	r3, [r7, #120]	; 0x78
 800560e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800561c:	4649      	mov	r1, r9
 800561e:	008b      	lsls	r3, r1, #2
 8005620:	4641      	mov	r1, r8
 8005622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005626:	4641      	mov	r1, r8
 8005628:	008a      	lsls	r2, r1, #2
 800562a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800562e:	f7fa fdcb 	bl	80001c8 <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4611      	mov	r1, r2
 8005638:	4b38      	ldr	r3, [pc, #224]	; (800571c <UART_SetConfig+0x4e4>)
 800563a:	fba3 2301 	umull	r2, r3, r3, r1
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	2264      	movs	r2, #100	; 0x64
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	1acb      	subs	r3, r1, r3
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	3332      	adds	r3, #50	; 0x32
 800564c:	4a33      	ldr	r2, [pc, #204]	; (800571c <UART_SetConfig+0x4e4>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005658:	441c      	add	r4, r3
 800565a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800565e:	2200      	movs	r2, #0
 8005660:	673b      	str	r3, [r7, #112]	; 0x70
 8005662:	677a      	str	r2, [r7, #116]	; 0x74
 8005664:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005668:	4642      	mov	r2, r8
 800566a:	464b      	mov	r3, r9
 800566c:	1891      	adds	r1, r2, r2
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	415b      	adcs	r3, r3
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005678:	4641      	mov	r1, r8
 800567a:	1851      	adds	r1, r2, r1
 800567c:	6039      	str	r1, [r7, #0]
 800567e:	4649      	mov	r1, r9
 8005680:	414b      	adcs	r3, r1
 8005682:	607b      	str	r3, [r7, #4]
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005690:	4659      	mov	r1, fp
 8005692:	00cb      	lsls	r3, r1, #3
 8005694:	4651      	mov	r1, sl
 8005696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800569a:	4651      	mov	r1, sl
 800569c:	00ca      	lsls	r2, r1, #3
 800569e:	4610      	mov	r0, r2
 80056a0:	4619      	mov	r1, r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	4642      	mov	r2, r8
 80056a6:	189b      	adds	r3, r3, r2
 80056a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80056aa:	464b      	mov	r3, r9
 80056ac:	460a      	mov	r2, r1
 80056ae:	eb42 0303 	adc.w	r3, r2, r3
 80056b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	663b      	str	r3, [r7, #96]	; 0x60
 80056be:	667a      	str	r2, [r7, #100]	; 0x64
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056cc:	4649      	mov	r1, r9
 80056ce:	008b      	lsls	r3, r1, #2
 80056d0:	4641      	mov	r1, r8
 80056d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d6:	4641      	mov	r1, r8
 80056d8:	008a      	lsls	r2, r1, #2
 80056da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056de:	f7fa fd73 	bl	80001c8 <__aeabi_uldivmod>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4b0d      	ldr	r3, [pc, #52]	; (800571c <UART_SetConfig+0x4e4>)
 80056e8:	fba3 1302 	umull	r1, r3, r3, r2
 80056ec:	095b      	lsrs	r3, r3, #5
 80056ee:	2164      	movs	r1, #100	; 0x64
 80056f0:	fb01 f303 	mul.w	r3, r1, r3
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	3332      	adds	r3, #50	; 0x32
 80056fa:	4a08      	ldr	r2, [pc, #32]	; (800571c <UART_SetConfig+0x4e4>)
 80056fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005700:	095b      	lsrs	r3, r3, #5
 8005702:	f003 020f 	and.w	r2, r3, #15
 8005706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4422      	add	r2, r4
 800570e:	609a      	str	r2, [r3, #8]
}
 8005710:	bf00      	nop
 8005712:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005716:	46bd      	mov	sp, r7
 8005718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800571c:	51eb851f 	.word	0x51eb851f

08005720 <memset>:
 8005720:	4402      	add	r2, r0
 8005722:	4603      	mov	r3, r0
 8005724:	4293      	cmp	r3, r2
 8005726:	d100      	bne.n	800572a <memset+0xa>
 8005728:	4770      	bx	lr
 800572a:	f803 1b01 	strb.w	r1, [r3], #1
 800572e:	e7f9      	b.n	8005724 <memset+0x4>

08005730 <__libc_init_array>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	4d0d      	ldr	r5, [pc, #52]	; (8005768 <__libc_init_array+0x38>)
 8005734:	4c0d      	ldr	r4, [pc, #52]	; (800576c <__libc_init_array+0x3c>)
 8005736:	1b64      	subs	r4, r4, r5
 8005738:	10a4      	asrs	r4, r4, #2
 800573a:	2600      	movs	r6, #0
 800573c:	42a6      	cmp	r6, r4
 800573e:	d109      	bne.n	8005754 <__libc_init_array+0x24>
 8005740:	4d0b      	ldr	r5, [pc, #44]	; (8005770 <__libc_init_array+0x40>)
 8005742:	4c0c      	ldr	r4, [pc, #48]	; (8005774 <__libc_init_array+0x44>)
 8005744:	f000 f818 	bl	8005778 <_init>
 8005748:	1b64      	subs	r4, r4, r5
 800574a:	10a4      	asrs	r4, r4, #2
 800574c:	2600      	movs	r6, #0
 800574e:	42a6      	cmp	r6, r4
 8005750:	d105      	bne.n	800575e <__libc_init_array+0x2e>
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	f855 3b04 	ldr.w	r3, [r5], #4
 8005758:	4798      	blx	r3
 800575a:	3601      	adds	r6, #1
 800575c:	e7ee      	b.n	800573c <__libc_init_array+0xc>
 800575e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005762:	4798      	blx	r3
 8005764:	3601      	adds	r6, #1
 8005766:	e7f2      	b.n	800574e <__libc_init_array+0x1e>
 8005768:	080057b8 	.word	0x080057b8
 800576c:	080057b8 	.word	0x080057b8
 8005770:	080057b8 	.word	0x080057b8
 8005774:	080057bc 	.word	0x080057bc

08005778 <_init>:
 8005778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577a:	bf00      	nop
 800577c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577e:	bc08      	pop	{r3}
 8005780:	469e      	mov	lr, r3
 8005782:	4770      	bx	lr

08005784 <_fini>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr
